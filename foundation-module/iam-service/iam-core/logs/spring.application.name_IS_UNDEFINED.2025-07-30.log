2025-07-30 15:29:44.249 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:29:44.251 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:29:44.252 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:29:44.253 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:29:44.255 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:29:44.256 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:29:44.256 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:29:44.473 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:29:44.923 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:29:44.924 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:29:44.937 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 15:29:45.055 [main] INFO  [GenericScope] - BeanFactory id=846a132d-3bc8-37aa-8885-0f805199012e
2025-07-30 15:29:45.147 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.147 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.148 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.168 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.171 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.171 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.171 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$682/0x00000008010b53a0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.172 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.174 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.175 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:29:45.176 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:29:45.186 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:29:45.204 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:29:45.209 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:29:45.217 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:29:45.218 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:29:45.248 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:29:45.254 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:29:45.256 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:29:45.259 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:29:45.260 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:29:45.262 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753860585262
timestamp=1753860585262
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:29:45.315 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:29:45.328 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xc2e255f4, L:/127.0.0.1:59511 - R:/127.0.0.1:8091]
2025-07-30 15:29:45.330 [main] INFO  [NettyPoolableFactory] - register success, cost 24 ms, version:2.0.0,role:TMROLE,channel:[id: 0xc2e255f4, L:/127.0.0.1:59511 - R:/127.0.0.1:8091]
2025-07-30 15:29:45.331 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:29:45.336 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:29:45.337 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:29:45.338 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:29:45.340 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:29:45.340 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:29:45.341 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:29:45.385 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:29:45.866 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:29:45.891 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:29:45.895 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:29:45.895 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:29:46.058 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:29:46.060 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1577 ms
2025-07-30 15:29:46.953 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:29:46.960 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:29:46.963 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:29:46.964 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:29:46.965 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:29:46.965 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:29:46.969 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:29:46.978 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xc2e255f4, L:/127.0.0.1:59511 ! R:/127.0.0.1:8091]
2025-07-30 15:29:46.978 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xc2e255f4, L:/127.0.0.1:59511 ! R:/127.0.0.1:8091]
2025-07-30 15:29:46.978 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xc2e255f4, L:/127.0.0.1:59511 ! R:/127.0.0.1:8091]
2025-07-30 15:29:46.978 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xc2e255f4, L:/127.0.0.1:59511 ! R:/127.0.0.1:8091]
2025-07-30 15:29:46.979 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xc2e255f4, L:/127.0.0.1:59511 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:29:46.979 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xc2e255f4, L:/127.0.0.1:59511 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:29:46.980 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:29:47.048 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:29:47.062 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:29:47.977 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:30:05.475 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:30:05.476 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:30:05.477 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:30:05.478 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:30:05.480 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:30:05.481 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:30:05.481 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:30:05.688 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:30:06.135 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:30:06.136 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:30:06.150 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-30 15:30:06.266 [main] INFO  [GenericScope] - BeanFactory id=846a132d-3bc8-37aa-8885-0f805199012e
2025-07-30 15:30:06.349 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.350 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.350 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.375 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.377 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.377 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.377 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$682/0x00000008010b5270] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.378 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.380 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.381 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:06.382 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:30:06.392 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:30:06.409 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:30:06.413 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:30:06.422 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:30:06.423 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:30:06.450 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:30:06.456 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:30:06.458 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:30:06.460 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:30:06.461 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:30:06.463 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753860606462
timestamp=1753860606462
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:30:06.514 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:30:06.537 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xefb4406a, L:/127.0.0.1:59600 - R:/127.0.0.1:8091]
2025-07-30 15:30:06.540 [main] INFO  [NettyPoolableFactory] - register success, cost 36 ms, version:2.0.0,role:TMROLE,channel:[id: 0xefb4406a, L:/127.0.0.1:59600 - R:/127.0.0.1:8091]
2025-07-30 15:30:06.540 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:30:06.545 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:30:06.546 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:30:06.546 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:30:06.548 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:30:06.549 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:30:06.549 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:30:06.593 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:30:06.865 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:30:06.871 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:30:06.871 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:30:06.871 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:30:06.901 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:30:06.902 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1206 ms
2025-07-30 15:30:07.444 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:30:07.448 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:30:07.451 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:30:07.451 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:30:07.452 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:30:07.452 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:30:07.456 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:30:07.463 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:30:07.502 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:30:07.513 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:30:08.461 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:30:45.961 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:30:45.963 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:30:45.963 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:30:45.965 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:30:45.966 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:30:45.968 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:30:45.968 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:30:46.190 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:30:46.660 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:30:46.662 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:30:46.676 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 15:30:46.800 [main] INFO  [GenericScope] - BeanFactory id=846a132d-3bc8-37aa-8885-0f805199012e
2025-07-30 15:30:46.888 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.888 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.889 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.910 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.911 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.912 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.912 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$682/0x00000008010b4aa0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.912 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.914 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.915 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:46.917 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:30:46.926 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:30:46.946 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:30:46.950 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:30:46.959 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:30:46.960 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:30:46.989 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:30:46.996 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:30:46.999 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:30:47.002 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:30:47.003 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:30:47.006 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753860647005
timestamp=1753860647005
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:30:47.086 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:30:47.101 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xb998b10b, L:/127.0.0.1:59611 - R:/127.0.0.1:8091]
2025-07-30 15:30:47.104 [main] INFO  [NettyPoolableFactory] - register success, cost 30 ms, version:2.0.0,role:TMROLE,channel:[id: 0xb998b10b, L:/127.0.0.1:59611 - R:/127.0.0.1:8091]
2025-07-30 15:30:47.105 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:30:47.115 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:30:47.116 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:30:47.116 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:30:47.119 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:30:47.119 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:30:47.119 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:30:47.176 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:30:47.864 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:30:47.937 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:30:47.940 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:30:47.940 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:30:48.039 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:30:48.040 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1840 ms
2025-07-30 15:30:48.822 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:30:48.827 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:30:48.830 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:30:48.831 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:30:48.832 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:30:48.832 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:30:48.835 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:30:48.848 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:30:48.910 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:30:48.926 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:30:49.846 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:30:49.846 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:30:57.666 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:30:57.668 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:30:57.668 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:30:57.669 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:30:57.671 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:30:57.672 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:30:57.673 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:30:57.892 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:30:58.374 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:30:58.376 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:30:58.390 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-30 15:30:58.522 [main] INFO  [GenericScope] - BeanFactory id=846a132d-3bc8-37aa-8885-0f805199012e
2025-07-30 15:30:58.631 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.631 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.632 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.655 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.656 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.657 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.657 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$682/0x00000008010b5270] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.658 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.660 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.662 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:30:58.663 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:30:58.673 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:30:58.692 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:30:58.697 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:30:58.707 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:30:58.707 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:30:58.739 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:30:58.745 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:30:58.748 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:30:58.750 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:30:58.752 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:30:58.754 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753860658753
timestamp=1753860658753
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:30:58.823 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:30:58.835 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xe6db2f3a, L:/127.0.0.1:59615 - R:/127.0.0.1:8091]
2025-07-30 15:30:58.838 [main] INFO  [NettyPoolableFactory] - register success, cost 27 ms, version:2.0.0,role:TMROLE,channel:[id: 0xe6db2f3a, L:/127.0.0.1:59615 - R:/127.0.0.1:8091]
2025-07-30 15:30:58.838 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:30:58.843 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:30:58.844 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:30:58.845 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:30:58.847 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:30:58.847 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:30:58.847 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:30:58.893 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:30:59.181 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:30:59.186 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:30:59.186 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:30:59.187 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:30:59.222 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:30:59.223 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1321 ms
2025-07-30 15:30:59.778 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:30:59.785 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:30:59.787 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:30:59.788 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:30:59.789 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:30:59.789 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:30:59.792 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:30:59.798 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xe6db2f3a, L:/127.0.0.1:59615 ! R:/127.0.0.1:8091]
2025-07-30 15:30:59.798 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xe6db2f3a, L:/127.0.0.1:59615 ! R:/127.0.0.1:8091]
2025-07-30 15:30:59.798 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xe6db2f3a, L:/127.0.0.1:59615 ! R:/127.0.0.1:8091]
2025-07-30 15:30:59.798 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xe6db2f3a, L:/127.0.0.1:59615 ! R:/127.0.0.1:8091]
2025-07-30 15:30:59.798 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe6db2f3a, L:/127.0.0.1:59615 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:30:59.798 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe6db2f3a, L:/127.0.0.1:59615 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:30:59.800 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:30:59.839 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:30:59.849 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:31:00.798 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:31:00.799 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:32:21.176 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:32:21.178 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:32:21.179 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:32:21.180 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:32:21.181 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:32:21.183 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:32:21.183 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:32:21.420 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:32:21.880 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:32:21.881 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:32:21.894 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 15:32:22.013 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:32:22.085 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:32:22.128 [main] INFO  [Reflections] - Reflections took 35 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 15:32:22.136 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:32:22.136 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:32:22.142 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository
2025-07-30 15:32:22.161 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.161 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.161 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.182 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.184 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.185 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.185 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$754/0x00000008010e21d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.185 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.187 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.188 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:32:22.190 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:32:22.202 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:32:22.221 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:32:22.225 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:32:22.234 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:32:22.234 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:32:22.260 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:32:22.266 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:32:22.273 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:32:22.275 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:32:22.276 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:32:22.280 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753860742279
timestamp=1753860742279
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:32:22.325 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:32:22.337 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x60e2da39, L:/127.0.0.1:59692 - R:/127.0.0.1:8091]
2025-07-30 15:32:22.339 [main] INFO  [NettyPoolableFactory] - register success, cost 23 ms, version:2.0.0,role:TMROLE,channel:[id: 0x60e2da39, L:/127.0.0.1:59692 - R:/127.0.0.1:8091]
2025-07-30 15:32:22.340 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:32:22.345 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:32:22.345 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:32:22.346 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:32:22.348 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:32:22.348 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:32:22.348 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:32:22.388 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:32:22.676 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:32:22.681 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:32:22.682 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:32:22.682 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:32:22.712 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:32:22.712 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1282 ms
2025-07-30 15:32:23.256 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:32:23.262 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:32:23.265 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:32:23.266 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:32:23.267 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:32:23.267 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:32:23.270 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:32:23.278 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:32:23.316 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:32:23.325 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:32:24.279 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:32:24.280 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:45:19.912 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:45:19.914 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:45:19.914 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:45:19.916 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:45:19.917 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:45:19.918 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:45:19.918 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:45:20.135 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:45:20.608 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:45:20.609 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:45:20.621 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 15:45:20.735 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:45:20.804 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:45:20.841 [main] INFO  [Reflections] - Reflections took 31 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 15:45:20.848 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:45:20.848 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:45:20.854 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository
2025-07-30 15:45:20.873 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.874 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.874 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.894 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.896 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.897 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.897 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$754/0x00000008010e21d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.897 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.899 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.901 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:45:20.902 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:45:20.911 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:45:20.929 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:45:20.933 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:45:20.942 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:45:20.942 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:45:20.974 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:45:20.980 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:45:20.984 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:45:20.986 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:45:20.987 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:45:20.991 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753861520990
timestamp=1753861520990
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:45:21.041 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:45:21.054 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xa80f5c35, L:/127.0.0.1:60833 - R:/127.0.0.1:8091]
2025-07-30 15:45:21.057 [main] INFO  [NettyPoolableFactory] - register success, cost 27 ms, version:2.0.0,role:TMROLE,channel:[id: 0xa80f5c35, L:/127.0.0.1:60833 - R:/127.0.0.1:8091]
2025-07-30 15:45:21.057 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:45:21.063 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:45:21.064 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:45:21.064 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:45:21.066 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:45:21.067 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:45:21.067 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:45:21.107 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:45:21.392 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:45:21.397 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:45:21.398 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:45:21.398 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:45:21.427 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:45:21.428 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1283 ms
2025-07-30 15:45:22.007 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:45:22.013 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:45:22.015 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:45:22.016 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:45:22.017 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:45:22.017 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:45:22.020 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:45:22.027 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:45:22.066 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:45:22.076 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:45:23.026 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:45:23.029 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:46:43.969 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:46:43.970 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:46:43.971 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:46:43.972 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:46:43.973 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:46:43.977 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:46:43.977 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:46:44.189 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:46:44.648 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:46:44.650 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:46:44.662 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 15:46:44.782 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:46:44.849 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:46:44.895 [main] INFO  [Reflections] - Reflections took 40 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 15:46:44.902 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:46:44.903 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:46:44.909 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:46:44.913 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.929 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.929 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.929 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.951 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.953 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.953 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.954 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e0650] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.954 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.956 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.957 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:46:44.958 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:46:44.970 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:46:44.992 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:46:44.996 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:46:45.006 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:46:45.006 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:46:45.035 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:46:45.042 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:46:45.051 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:46:45.058 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:46:45.060 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:46:45.063 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753861605062
timestamp=1753861605062
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:46:45.120 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:46:45.138 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x4b898dd9, L:/127.0.0.1:60960 - R:/127.0.0.1:8091]
2025-07-30 15:46:45.156 [main] INFO  [NettyPoolableFactory] - register success, cost 47 ms, version:2.0.0,role:TMROLE,channel:[id: 0x4b898dd9, L:/127.0.0.1:60960 - R:/127.0.0.1:8091]
2025-07-30 15:46:45.161 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:46:45.212 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:46:45.216 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:46:45.222 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:46:45.232 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:46:45.232 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:46:45.232 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:46:45.508 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:46:46.158 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:46:46.165 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:46:46.166 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:46:46.166 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:46:46.213 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:46:46.214 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 2015 ms
2025-07-30 15:46:46.902 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:46:46.907 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:46:46.910 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:46:46.910 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:46:46.911 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:46:46.911 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:46:46.959 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 15:46:46.982 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 15:46:46.982 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 15:46:46.998 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 15:46:47.196 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@61b6f287
2025-07-30 15:46:47.197 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 15:46:47.210 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 15:46:47.229 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:46:47.229 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:46:47.229 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:46:47.323 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:46:47.324 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 15:46:47.324 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 15:46:47.418 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x9e12e602, L:/127.0.0.1:60965 - R:/127.0.0.1:8091]
2025-07-30 15:46:47.418 [main] INFO  [NettyPoolableFactory] - register success, cost 94 ms, version:2.0.0,role:RMROLE,channel:[id: 0x9e12e602, L:/127.0.0.1:60965 - R:/127.0.0.1:8091]
2025-07-30 15:46:47.421 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 15:46:47.478 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 15:46:47.478 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 15:46:47.682 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 15:46:47.713 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 15:46:47.720 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 15:46:47.790 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 15:46:47.791 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 15:46:47.792 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 15:46:47.792 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 15:46:47.820 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 15:46:47.999 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 15:46:48.066 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 15:46:48.066 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 15:46:48.129 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 15:46:48.140 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 15:46:48.143 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:46:48.392 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 15:46:48.393 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 15:46:48.395 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:46:48.830 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753861608398, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 15:46:49.152 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 15:46:49.194 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:46:49.195 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:46:49.195 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:46:49.195 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:46:49.195 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:46:49.195 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:46:49.196 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:46:49.196 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:46:49.196 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:46:49.196 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:46:49.196 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:46:49.196 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:46:49.198 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 15:46:49.204 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 15:46:49.213 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 15:46:49.213 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 15:46:49.723 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 15:46:49.724 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 15:46:49.724 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 15:46:49.724 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 15:46:49.780 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 15:46:49.795 [main] INFO  [IAMApplication] - Started IAMApplication in 6.035 seconds (process running for 6.253)
2025-07-30 15:48:01.760 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:48:01.762 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:48:01.762 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:48:01.764 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:48:01.765 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:48:01.767 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:48:01.767 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:48:02.018 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:48:02.034 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:48:02.034 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 15:48:02.034 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 15:48:02.036 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 15:48:02.036 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:48:02.037 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 15:48:02.043 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 15:48:02.075 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 15:48:02.488 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:48:02.490 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:48:02.503 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 15:48:02.625 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:48:02.696 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:48:02.734 [main] INFO  [Reflections] - Reflections took 32 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 15:48:02.740 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:48:02.740 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:48:02.746 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:48:02.749 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.765 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.766 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.766 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.787 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.789 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.789 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.790 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2f40] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.790 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.792 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.794 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:48:02.795 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:48:02.805 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:48:02.823 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:48:02.827 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:48:02.837 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:48:02.837 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:48:02.872 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:48:02.880 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:48:02.885 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:48:02.887 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:48:02.888 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:48:02.892 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753861682891
timestamp=1753861682891
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:48:02.945 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:48:02.958 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xfdb27826, L:/127.0.0.1:61017 - R:/127.0.0.1:8091]
2025-07-30 15:48:02.961 [main] INFO  [NettyPoolableFactory] - register success, cost 27 ms, version:2.0.0,role:TMROLE,channel:[id: 0xfdb27826, L:/127.0.0.1:61017 - R:/127.0.0.1:8091]
2025-07-30 15:48:02.961 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:48:02.967 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:48:02.969 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:48:02.969 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:48:02.971 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:48:02.972 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:48:02.972 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:48:03.013 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:48:03.302 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:48:03.308 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:48:03.309 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:48:03.309 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:48:03.340 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:48:03.340 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1313 ms
2025-07-30 15:48:03.875 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:48:03.880 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:48:03.882 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:48:03.883 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:48:03.883 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:48:03.883 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:48:03.920 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 15:48:03.929 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 15:48:03.929 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 15:48:03.938 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 15:48:04.048 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7a80ebcd
2025-07-30 15:48:04.049 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 15:48:04.061 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 15:48:04.073 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:48:04.073 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:48:04.073 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:48:04.116 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:48:04.116 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 15:48:04.116 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 15:48:04.121 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x9d8c64ad, L:/127.0.0.1:61020 - R:/127.0.0.1:8091]
2025-07-30 15:48:04.121 [main] INFO  [NettyPoolableFactory] - register success, cost 4 ms, version:2.0.0,role:RMROLE,channel:[id: 0x9d8c64ad, L:/127.0.0.1:61020 - R:/127.0.0.1:8091]
2025-07-30 15:48:04.123 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 15:48:04.148 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 15:48:04.148 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 15:48:04.268 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 15:48:04.297 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 15:48:04.304 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 15:48:04.369 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 15:48:04.371 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 15:48:04.371 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 15:48:04.372 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 15:48:04.397 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 15:48:04.543 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 15:48:04.570 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 15:48:04.570 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 15:48:04.621 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 15:48:04.628 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 15:48:04.631 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:48:04.778 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 15:48:04.778 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 15:48:04.780 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:48:04.939 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753861684783, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 15:48:05.215 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 15:48:05.264 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:48:05.264 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:48:05.264 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:48:05.264 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:48:05.264 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:48:05.264 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:48:05.265 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:48:05.265 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:48:05.265 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:48:05.266 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:48:05.266 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:48:05.266 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:48:05.268 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 15:48:05.382 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 15:48:05.387 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 15:48:07.788 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 15:48:07.814 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x9d8c64ad, L:/127.0.0.1:61020 ! R:/127.0.0.1:8091]
2025-07-30 15:48:07.815 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x9d8c64ad, L:/127.0.0.1:61020 ! R:/127.0.0.1:8091]
2025-07-30 15:48:07.815 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x9d8c64ad, L:/127.0.0.1:61020 ! R:/127.0.0.1:8091]
2025-07-30 15:48:07.815 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x9d8c64ad, L:/127.0.0.1:61020 ! R:/127.0.0.1:8091]
2025-07-30 15:48:07.815 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x9d8c64ad, L:/127.0.0.1:61020 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:48:07.816 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x9d8c64ad, L:/127.0.0.1:61020 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:48:07.821 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:48:07.848 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:48:07.873 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 15:48:10.832 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:48:10.832 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 15:48:10.834 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:48:23.270 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 15:48:24.511 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 15:48:24.525 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x4b898dd9, L:/127.0.0.1:60960 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.525 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x4b898dd9, L:/127.0.0.1:60960 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.526 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x4b898dd9, L:/127.0.0.1:60960 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.526 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x4b898dd9, L:/127.0.0.1:60960 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.526 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x4b898dd9, L:/127.0.0.1:60960 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:48:24.526 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x4b898dd9, L:/127.0.0.1:60960 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:48:24.529 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x9e12e602, L:/127.0.0.1:60965 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.529 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x9e12e602, L:/127.0.0.1:60965 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.529 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x9e12e602, L:/127.0.0.1:60965 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.529 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x9e12e602, L:/127.0.0.1:60965 ! R:/127.0.0.1:8091]
2025-07-30 15:48:24.529 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x9e12e602, L:/127.0.0.1:60965 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:48:24.529 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x9e12e602, L:/127.0.0.1:60965 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:49:08.695 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:49:08.696 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:49:08.697 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:49:08.698 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:49:08.700 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:49:08.702 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:49:08.702 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:49:08.911 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:49:09.360 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:49:09.362 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:49:09.374 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 15:49:09.505 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:49:09.588 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:49:09.640 [main] INFO  [Reflections] - Reflections took 45 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 15:49:09.647 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:49:09.647 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:49:09.654 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:49:09.658 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.675 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.675 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.675 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.698 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.700 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.701 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.701 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.702 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.704 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.705 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:49:09.707 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:49:09.716 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:49:09.734 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:49:09.738 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:49:09.746 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:49:09.747 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:49:09.775 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:49:09.782 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:49:09.789 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:49:09.792 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:49:09.795 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:49:09.797 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753861749796
timestamp=1753861749796
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:49:09.846 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:49:09.860 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xcbcd64b5, L:/127.0.0.1:61105 - R:/127.0.0.1:8091]
2025-07-30 15:49:09.863 [main] INFO  [NettyPoolableFactory] - register success, cost 27 ms, version:2.0.0,role:TMROLE,channel:[id: 0xcbcd64b5, L:/127.0.0.1:61105 - R:/127.0.0.1:8091]
2025-07-30 15:49:09.863 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:49:09.869 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:49:09.871 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:49:09.871 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:49:09.873 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:49:09.873 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:49:09.873 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:49:09.919 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:49:10.242 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8082 (http)
2025-07-30 15:49:10.247 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8082"]
2025-07-30 15:49:10.248 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:49:10.248 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:49:10.280 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:49:10.280 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1361 ms
2025-07-30 15:49:10.837 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:49:10.842 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:49:10.844 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:49:10.845 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:49:10.846 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:49:10.846 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:49:10.882 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 15:49:10.894 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 15:49:10.894 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 15:49:10.903 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 15:49:11.026 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5f80b25a
2025-07-30 15:49:11.027 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 15:49:11.039 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 15:49:11.051 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:49:11.051 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:49:11.051 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:49:11.092 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:49:11.092 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 15:49:11.092 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 15:49:11.100 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x29eabcfe, L:/127.0.0.1:61108 - R:/127.0.0.1:8091]
2025-07-30 15:49:11.100 [main] INFO  [NettyPoolableFactory] - register success, cost 7 ms, version:2.0.0,role:RMROLE,channel:[id: 0x29eabcfe, L:/127.0.0.1:61108 - R:/127.0.0.1:8091]
2025-07-30 15:49:11.103 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 15:49:11.129 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 15:49:11.129 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 15:49:11.246 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 15:49:11.275 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 15:49:11.282 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 15:49:11.348 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 15:49:11.349 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 15:49:11.350 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 15:49:11.350 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 15:49:11.377 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 15:49:11.529 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 15:49:11.560 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 15:49:11.560 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 15:49:11.610 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 15:49:11.616 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 15:49:11.619 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:49:11.778 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 15:49:11.778 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 15:49:11.780 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:49:11.943 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8082-1753861751783, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 15:49:12.226 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 15:49:12.265 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:49:12.266 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:49:12.266 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:49:12.266 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:49:12.266 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:49:12.266 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:49:12.267 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:49:12.267 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:49:12.267 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:49:12.267 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:49:12.267 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:49:12.267 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:49:12.270 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8082"]
2025-07-30 15:49:12.277 [main] INFO  [TomcatWebServer] - Tomcat started on port 8082 (http) with context path ''
2025-07-30 15:49:12.286 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 15:49:12.286 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 15:49:12.702 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 15:49:12.703 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 15:49:12.703 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 15:49:12.703 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 15:49:12.738 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8082 register finished
2025-07-30 15:49:12.752 [main] INFO  [IAMApplication] - Started IAMApplication in 4.238 seconds (process running for 4.453)
2025-07-30 15:49:27.355 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:49:27.355 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 15:49:27.355 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 15:49:27.358 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 15:49:27.359 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:49:27.360 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 15:49:27.361 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 15:49:27.385 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 15:49:48.585 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 15:49:50.828 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 15:49:50.842 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xcbcd64b5, L:/127.0.0.1:61105 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.842 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xcbcd64b5, L:/127.0.0.1:61105 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.843 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xcbcd64b5, L:/127.0.0.1:61105 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.843 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xcbcd64b5, L:/127.0.0.1:61105 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.843 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xcbcd64b5, L:/127.0.0.1:61105 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:49:50.843 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xcbcd64b5, L:/127.0.0.1:61105 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:49:50.844 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x29eabcfe, L:/127.0.0.1:61108 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.844 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x29eabcfe, L:/127.0.0.1:61108 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.845 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x29eabcfe, L:/127.0.0.1:61108 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.845 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x29eabcfe, L:/127.0.0.1:61108 ! R:/127.0.0.1:8091]
2025-07-30 15:49:50.845 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x29eabcfe, L:/127.0.0.1:61108 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:49:50.845 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x29eabcfe, L:/127.0.0.1:61108 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:54:40.246 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:54:40.248 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:54:40.248 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:54:40.250 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:54:40.251 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:54:40.253 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:54:40.253 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:54:40.484 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:54:40.975 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:54:40.976 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:54:40.993 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-07-30 15:54:41.115 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:54:41.188 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:54:41.233 [main] INFO  [Reflections] - Reflections took 38 ms to scan 7 urls, producing 88 keys and 295 values
2025-07-30 15:54:41.240 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:54:41.240 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:54:41.249 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:54:41.256 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.270 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.271 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.271 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.294 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.296 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.296 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.296 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.297 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.299 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.300 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:54:41.301 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:54:41.314 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:54:41.334 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:54:41.340 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:54:41.350 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:54:41.350 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:54:41.382 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:54:41.389 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:54:41.397 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:54:41.400 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:54:41.404 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:54:41.407 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753862081406
timestamp=1753862081406
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:54:41.655 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:54:41.720 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x371b139e, L:/127.0.0.1:61701 - R:/127.0.0.1:8091]
2025-07-30 15:54:41.736 [main] INFO  [NettyPoolableFactory] - register success, cost 149 ms, version:2.0.0,role:TMROLE,channel:[id: 0x371b139e, L:/127.0.0.1:61701 - R:/127.0.0.1:8091]
2025-07-30 15:54:41.738 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:54:41.803 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:54:41.808 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:54:41.810 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:54:41.829 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:54:41.830 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:54:41.830 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:54:42.132 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:54:42.558 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:54:42.563 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:54:42.563 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:54:42.563 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:54:42.599 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:54:42.600 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 2106 ms
2025-07-30 15:54:43.170 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:54:43.175 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:54:43.178 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:54:43.178 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:54:43.179 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:54:43.179 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:54:43.218 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 15:54:43.229 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 15:54:43.229 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 15:54:43.238 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 15:54:43.356 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4667c6d9
2025-07-30 15:54:43.357 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 15:54:43.369 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 15:54:43.382 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:54:43.382 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:54:43.382 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:54:43.424 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:54:43.425 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 15:54:43.425 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 15:54:43.442 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x9014f908, L:/127.0.0.1:61704 - R:/127.0.0.1:8091]
2025-07-30 15:54:43.442 [main] INFO  [NettyPoolableFactory] - register success, cost 17 ms, version:2.0.0,role:RMROLE,channel:[id: 0x9014f908, L:/127.0.0.1:61704 - R:/127.0.0.1:8091]
2025-07-30 15:54:43.444 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 15:54:43.471 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 15:54:43.471 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 15:54:43.595 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 15:54:43.621 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 15:54:43.629 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 15:54:43.694 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 15:54:43.695 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 15:54:43.696 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 15:54:43.696 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 15:54:43.725 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 15:54:43.875 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 15:54:43.941 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 15:54:43.942 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 15:54:43.995 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 15:54:44.002 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 15:54:44.005 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:54:44.164 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 15:54:44.164 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 15:54:44.166 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 15:54:44.333 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753862084169, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 15:54:44.707 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 15:54:44.750 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:54:44.751 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:54:44.751 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:54:44.751 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:54:44.751 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:54:44.751 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:54:44.752 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:54:44.752 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:54:44.752 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:54:44.753 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 15:54:44.753 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 15:54:44.753 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 15:54:44.755 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 15:54:44.868 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 15:54:44.872 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 15:54:47.176 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 15:54:47.185 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x371b139e, L:/127.0.0.1:61701 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x371b139e, L:/127.0.0.1:61701 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x371b139e, L:/127.0.0.1:61701 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x371b139e, L:/127.0.0.1:61701 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x371b139e, L:/127.0.0.1:61701 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:54:47.185 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x9014f908, L:/127.0.0.1:61704 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x9014f908, L:/127.0.0.1:61704 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x371b139e, L:/127.0.0.1:61701 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:54:47.185 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x9014f908, L:/127.0.0.1:61704 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.185 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x9014f908, L:/127.0.0.1:61704 ! R:/127.0.0.1:8091]
2025-07-30 15:54:47.186 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x9014f908, L:/127.0.0.1:61704 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:54:47.186 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x9014f908, L:/127.0.0.1:61704 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:54:47.187 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:54:47.204 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:54:47.218 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 15:54:50.216 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 15:54:50.216 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:54:50.217 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:55:18.987 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:55:18.988 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:55:18.988 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:55:18.989 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:55:18.991 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:55:18.993 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:55:18.993 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:55:19.197 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:55:19.596 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:55:19.597 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:55:19.608 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 15:55:19.707 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:55:19.771 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:55:19.805 [main] INFO  [Reflections] - Reflections took 28 ms to scan 7 urls, producing 88 keys and 295 values
2025-07-30 15:55:19.810 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:55:19.811 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:55:19.811 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered BaseRepository implementation: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:55:19.826 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.827 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.827 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.845 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.847 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.847 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.847 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010d8d20] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.848 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.849 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.851 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:55:19.852 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:55:19.860 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:55:19.875 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:55:19.879 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:55:19.886 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:55:19.887 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:55:19.916 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:55:19.921 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:55:19.924 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:55:19.925 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:55:19.926 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:55:19.928 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753862119928
timestamp=1753862119928
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:55:19.974 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:55:19.985 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xab9fe54b, L:/127.0.0.1:61760 - R:/127.0.0.1:8091]
2025-07-30 15:55:19.987 [main] INFO  [NettyPoolableFactory] - register success, cost 22 ms, version:2.0.0,role:TMROLE,channel:[id: 0xab9fe54b, L:/127.0.0.1:61760 - R:/127.0.0.1:8091]
2025-07-30 15:55:19.987 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:55:19.991 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:55:19.992 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:55:19.993 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:55:19.995 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:55:19.995 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:55:19.995 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:55:20.037 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:55:20.301 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:55:20.305 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:55:20.306 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:55:20.306 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:55:20.334 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:55:20.335 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1130 ms
2025-07-30 15:55:21.041 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:55:21.047 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:55:21.050 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:55:21.052 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:55:21.053 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:55:21.053 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:55:21.057 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:55:21.068 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xab9fe54b, L:/127.0.0.1:61760 ! R:/127.0.0.1:8091]
2025-07-30 15:55:21.069 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xab9fe54b, L:/127.0.0.1:61760 ! R:/127.0.0.1:8091]
2025-07-30 15:55:21.069 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xab9fe54b, L:/127.0.0.1:61760 ! R:/127.0.0.1:8091]
2025-07-30 15:55:21.069 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xab9fe54b, L:/127.0.0.1:61760 ! R:/127.0.0.1:8091]
2025-07-30 15:55:21.069 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xab9fe54b, L:/127.0.0.1:61760 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:55:21.069 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xab9fe54b, L:/127.0.0.1:61760 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:55:21.072 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:55:21.115 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:55:21.126 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:55:22.069 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:56:06.864 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:56:06.866 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:56:06.866 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:56:06.867 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:56:06.869 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:56:06.871 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:56:06.871 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:56:07.084 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:56:07.537 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:56:07.538 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:56:07.551 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 15:56:07.669 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:56:07.736 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:56:07.790 [main] INFO  [Reflections] - Reflections took 48 ms to scan 7 urls, producing 88 keys and 295 values
2025-07-30 15:56:07.797 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:56:07.797 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:56:07.797 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered BaseRepository implementation: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:56:07.822 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.822 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.822 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.858 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.860 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.861 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.861 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010d8d20] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.862 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.864 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.865 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:56:07.867 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:56:07.882 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:56:07.917 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:56:07.922 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:56:07.934 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:56:07.935 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:56:07.967 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:56:07.974 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:56:07.977 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:56:07.980 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:56:07.981 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:56:07.984 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753862167983
timestamp=1753862167983
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:56:08.042 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:56:08.055 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x07369b83, L:/127.0.0.1:61854 - R:/127.0.0.1:8091]
2025-07-30 15:56:08.057 [main] INFO  [NettyPoolableFactory] - register success, cost 26 ms, version:2.0.0,role:TMROLE,channel:[id: 0x07369b83, L:/127.0.0.1:61854 - R:/127.0.0.1:8091]
2025-07-30 15:56:08.058 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:56:08.063 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:56:08.064 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:56:08.065 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:56:08.067 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:56:08.068 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:56:08.068 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:56:08.115 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:56:08.395 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:56:08.399 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:56:08.400 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:56:08.400 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:56:08.429 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:56:08.429 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1337 ms
2025-07-30 15:56:09.121 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:56:09.126 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:56:09.129 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:56:09.130 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:56:09.131 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:56:09.131 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:56:09.134 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:56:09.141 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x07369b83, L:/127.0.0.1:61854 ! R:/127.0.0.1:8091]
2025-07-30 15:56:09.141 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x07369b83, L:/127.0.0.1:61854 ! R:/127.0.0.1:8091]
2025-07-30 15:56:09.141 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x07369b83, L:/127.0.0.1:61854 ! R:/127.0.0.1:8091]
2025-07-30 15:56:09.141 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x07369b83, L:/127.0.0.1:61854 ! R:/127.0.0.1:8091]
2025-07-30 15:56:09.141 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x07369b83, L:/127.0.0.1:61854 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:56:09.141 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x07369b83, L:/127.0.0.1:61854 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:56:09.145 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:56:09.198 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:56:09.209 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:56:10.144 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:57:08.541 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:57:08.544 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:57:08.544 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:57:08.545 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:57:08.547 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:57:08.549 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:57:08.549 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:57:08.809 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:57:09.342 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:57:09.344 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:57:09.358 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 15:57:09.479 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:57:09.551 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:57:09.596 [main] INFO  [Reflections] - Reflections took 38 ms to scan 7 urls, producing 88 keys and 295 values
2025-07-30 15:57:09.603 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:57:09.603 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:57:09.604 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered BaseRepository implementation: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:57:09.622 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.622 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.623 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.651 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.654 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.654 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.655 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$754/0x00000008010d6bc0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.655 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.657 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.658 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:09.660 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:57:09.684 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:57:09.705 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:57:09.710 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:57:09.722 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:57:09.723 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:57:09.763 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:57:09.769 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:57:09.773 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:57:09.777 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:57:09.778 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:57:09.781 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753862229780
timestamp=1753862229780
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:57:09.853 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:57:09.867 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xb277326f, L:/127.0.0.1:61911 - R:/127.0.0.1:8091]
2025-07-30 15:57:09.870 [main] INFO  [NettyPoolableFactory] - register success, cost 29 ms, version:2.0.0,role:TMROLE,channel:[id: 0xb277326f, L:/127.0.0.1:61911 - R:/127.0.0.1:8091]
2025-07-30 15:57:09.870 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:57:09.879 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:57:09.880 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:57:09.880 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:57:09.883 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:57:09.884 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:57:09.884 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:57:09.935 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:57:10.217 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:57:10.221 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:57:10.221 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:57:10.221 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:57:10.249 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:57:10.250 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1432 ms
2025-07-30 15:57:10.841 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:57:10.846 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:57:10.849 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:57:10.849 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:57:10.850 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:57:10.851 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:57:10.854 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:57:10.862 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:57:10.901 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:57:10.911 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 15:57:11.864 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 15:57:11.864 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 15:57:56.626 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:57:56.628 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 15:57:56.628 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 15:57:56.629 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 15:57:56.630 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 15:57:56.631 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 15:57:56.632 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 15:57:56.824 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 15:57:57.224 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 15:57:57.225 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 15:57:57.236 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 15:57:57.340 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 15:57:57.400 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 15:57:57.437 [main] INFO  [Reflections] - Reflections took 32 ms to scan 7 urls, producing 88 keys and 295 values
2025-07-30 15:57:57.443 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 15:57:57.443 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:57:57.443 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered BaseRepository implementation: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 15:57:57.459 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.459 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.459 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.478 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.480 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.480 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.480 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010d7250] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.480 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.482 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.483 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 15:57:57.485 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 15:57:57.492 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 15:57:57.508 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 15:57:57.511 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 15:57:57.518 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 15:57:57.519 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 15:57:57.542 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 15:57:57.546 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:57:57.548 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 15:57:57.550 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 15:57:57.551 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 15:57:57.553 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753862277552
timestamp=1753862277552
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 15:57:57.605 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 15:57:57.616 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x265671f9, L:/127.0.0.1:61959 - R:/127.0.0.1:8091]
2025-07-30 15:57:57.619 [main] INFO  [NettyPoolableFactory] - register success, cost 23 ms, version:2.0.0,role:TMROLE,channel:[id: 0x265671f9, L:/127.0.0.1:61959 - R:/127.0.0.1:8091]
2025-07-30 15:57:57.619 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:57:57.623 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 15:57:57.624 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 15:57:57.625 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 15:57:57.627 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 15:57:57.627 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 15:57:57.627 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 15:57:57.667 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 15:57:57.917 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 15:57:57.922 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 15:57:57.922 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 15:57:57.922 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 15:57:57.951 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 15:57:57.951 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1119 ms
2025-07-30 15:57:58.478 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 15:57:58.483 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 15:57:58.485 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 15:57:58.485 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 15:57:58.486 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 15:57:58.486 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 15:57:58.489 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'tenantController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/TenantController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'tenantServiceImpl' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/TenantServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.indigo.iam.repository.service.TenantsRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 15:57:58.494 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x265671f9, L:/127.0.0.1:61959 ! R:/127.0.0.1:8091]
2025-07-30 15:57:58.494 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x265671f9, L:/127.0.0.1:61959 ! R:/127.0.0.1:8091]
2025-07-30 15:57:58.494 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x265671f9, L:/127.0.0.1:61959 ! R:/127.0.0.1:8091]
2025-07-30 15:57:58.494 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x265671f9, L:/127.0.0.1:61959 ! R:/127.0.0.1:8091]
2025-07-30 15:57:58.494 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x265671f9, L:/127.0.0.1:61959 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:57:58.494 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x265671f9, L:/127.0.0.1:61959 ! R:/127.0.0.1:8091]) will closed
2025-07-30 15:57:58.496 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 15:57:58.530 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 15:57:58.538 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.indigo.iam.service.TenantServiceImpl required a bean of type 'com.indigo.iam.repository.service.TenantsRepository' that could not be found.


Action:

Consider defining a bean of type 'com.indigo.iam.repository.service.TenantsRepository' in your configuration.

2025-07-30 16:01:34.080 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:01:34.081 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:01:34.081 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:01:34.084 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:01:34.085 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:01:34.087 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:01:34.088 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:01:34.338 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:01:34.852 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:01:34.853 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:01:34.867 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:01:34.988 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:01:35.062 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:01:35.107 [main] INFO  [Reflections] - Reflections took 38 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:01:35.114 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:01:35.115 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:01:35.128 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:01:35.133 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.150 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.150 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.150 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.175 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.177 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.177 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.177 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e0850] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.178 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.180 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.181 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:01:35.182 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:01:35.191 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:01:35.214 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:01:35.219 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:01:35.228 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:01:35.229 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:01:35.259 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:01:35.266 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:01:35.274 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:01:35.277 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:01:35.278 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:01:35.282 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753862495281
timestamp=1753862495281
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:01:35.337 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:01:35.354 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xf9a813ae, L:/127.0.0.1:62579 - R:/127.0.0.1:8091]
2025-07-30 16:01:35.356 [main] INFO  [NettyPoolableFactory] - register success, cost 30 ms, version:2.0.0,role:TMROLE,channel:[id: 0xf9a813ae, L:/127.0.0.1:62579 - R:/127.0.0.1:8091]
2025-07-30 16:01:35.357 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:01:35.362 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:01:35.364 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:01:35.364 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:01:35.366 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:01:35.366 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:01:35.366 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:01:35.406 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:01:35.701 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:01:35.707 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:01:35.708 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:01:35.708 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:01:35.751 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:01:35.751 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1405 ms
2025-07-30 16:01:36.405 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:01:36.411 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:01:36.414 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:01:36.414 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:01:36.415 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:01:36.415 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:01:36.452 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:01:36.463 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:01:36.463 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:01:36.472 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:01:36.614 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7672dd7a
2025-07-30 16:01:36.615 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:01:36.627 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:01:36.638 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:01:36.638 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:01:36.638 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:01:36.685 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:01:36.685 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:01:36.685 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:01:36.691 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x23957a2c, L:/127.0.0.1:62590 - R:/127.0.0.1:8091]
2025-07-30 16:01:36.691 [main] INFO  [NettyPoolableFactory] - register success, cost 5 ms, version:2.0.0,role:RMROLE,channel:[id: 0x23957a2c, L:/127.0.0.1:62590 - R:/127.0.0.1:8091]
2025-07-30 16:01:36.693 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:01:36.720 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:01:36.720 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:01:36.845 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:01:36.871 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:01:36.878 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:01:36.936 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:01:36.937 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:01:36.938 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:01:36.938 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:01:36.961 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:01:37.113 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:01:37.139 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:01:37.139 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:01:37.186 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:01:37.191 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:01:37.194 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:01:37.336 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:01:37.345 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:01:37.347 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:01:37.534 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753862497355, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:01:37.811 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:01:37.893 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:01:37.893 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:01:37.893 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:01:37.893 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:01:37.893 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:01:37.893 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:01:37.894 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:01:37.894 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:01:37.894 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:01:37.894 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:01:37.894 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:01:37.894 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:01:37.896 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:01:37.901 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:01:37.911 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:01:37.911 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:01:38.317 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:01:38.318 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:01:38.318 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:01:38.318 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:01:38.345 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:01:38.358 [main] INFO  [IAMApplication] - Started IAMApplication in 4.522 seconds (process running for 4.772)
2025-07-30 16:14:08.875 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:14:08.877 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:14:08.877 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:14:08.878 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:14:08.879 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:14:08.881 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:14:08.881 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:14:09.087 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:14:09.527 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:14:09.529 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:14:09.541 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:14:09.663 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:14:09.738 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:14:09.781 [main] INFO  [Reflections] - Reflections took 37 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:14:09.788 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:14:09.788 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:14:09.794 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:14:09.797 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.812 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.813 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.813 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.835 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.837 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.837 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.838 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.838 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.840 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.842 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:09.843 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:14:09.852 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:14:09.870 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:14:09.875 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:14:09.884 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:14:09.884 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:14:09.912 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:14:09.920 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:14:09.924 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:14:09.927 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:14:09.928 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:14:09.931 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753863249930
timestamp=1753863249930
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:14:09.981 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:14:09.999 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x89da5e38, L:/127.0.0.1:64851 - R:/127.0.0.1:8091]
2025-07-30 16:14:10.001 [main] INFO  [NettyPoolableFactory] - register success, cost 31 ms, version:2.0.0,role:TMROLE,channel:[id: 0x89da5e38, L:/127.0.0.1:64851 - R:/127.0.0.1:8091]
2025-07-30 16:14:10.002 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:14:10.008 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:14:10.009 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:14:10.009 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:14:10.012 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:14:10.012 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:14:10.012 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:14:10.051 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:14:10.324 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:14:10.329 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:14:10.330 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:14:10.330 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:14:10.359 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:14:10.360 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1265 ms
2025-07-30 16:14:10.893 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:14:10.898 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:14:10.901 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:14:10.902 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:14:10.902 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:14:10.902 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:14:10.937 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:14:10.947 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:14:10.947 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:14:10.957 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:14:11.072 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@ab11e76
2025-07-30 16:14:11.073 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:14:11.086 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:14:11.101 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:11.101 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:11.101 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:11.152 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:14:11.152 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:14:11.152 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:14:11.166 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xe44a0697, L:/127.0.0.1:64857 - R:/127.0.0.1:8091]
2025-07-30 16:14:11.166 [main] INFO  [NettyPoolableFactory] - register success, cost 13 ms, version:2.0.0,role:RMROLE,channel:[id: 0xe44a0697, L:/127.0.0.1:64857 - R:/127.0.0.1:8091]
2025-07-30 16:14:11.170 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:14:11.209 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:14:11.209 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:14:11.991 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:14:12.097 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:14:12.106 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:14:12.365 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:14:12.371 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:14:12.375 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:14:12.376 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:14:12.482 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:14:12.983 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:14:13.091 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:14:13.091 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:14:13.206 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:14:13.223 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:14:13.228 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:14:13.489 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:14:13.489 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:14:13.494 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:14:13.711 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753863253500, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:14:14.063 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:14:14.110 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:14.110 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:14.110 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:14.110 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:14.110 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:14.110 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:14.112 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:14.112 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:14.112 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:14.112 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:14.113 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:14.113 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:14.115 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:14:14.233 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:14:14.237 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:14:16.496 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:14:16.507 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xe44a0697, L:/127.0.0.1:64857 ! R:/127.0.0.1:8091]
2025-07-30 16:14:16.507 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xe44a0697, L:/127.0.0.1:64857 ! R:/127.0.0.1:8091]
2025-07-30 16:14:16.507 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xe44a0697, L:/127.0.0.1:64857 ! R:/127.0.0.1:8091]
2025-07-30 16:14:16.507 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xe44a0697, L:/127.0.0.1:64857 ! R:/127.0.0.1:8091]
2025-07-30 16:14:16.507 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe44a0697, L:/127.0.0.1:64857 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:14:16.507 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe44a0697, L:/127.0.0.1:64857 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:14:16.512 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:14:16.529 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:14:16.544 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:14:19.545 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:14:19.545 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:14:19.546 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:14:29.209 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:14:29.210 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:14:29.210 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:14:29.211 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:14:29.213 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:14:29.216 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:14:29.216 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:14:29.423 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:14:29.874 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:14:29.875 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:14:29.889 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:14:30.020 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:14:30.095 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:14:30.134 [main] INFO  [Reflections] - Reflections took 33 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:14:30.141 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:14:30.141 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:14:30.147 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:14:30.151 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.165 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.166 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.166 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.186 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.188 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.188 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.189 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.189 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.191 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.192 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:14:30.193 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:14:30.202 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:14:30.219 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:14:30.223 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:14:30.231 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:14:30.232 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:14:30.260 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:14:30.267 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:14:30.276 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:14:30.278 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:14:30.281 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:14:30.284 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753863270283
timestamp=1753863270283
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:14:30.333 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:14:30.344 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x15163139, L:/127.0.0.1:64867 - R:/127.0.0.1:8091]
2025-07-30 16:14:30.347 [main] INFO  [NettyPoolableFactory] - register success, cost 26 ms, version:2.0.0,role:TMROLE,channel:[id: 0x15163139, L:/127.0.0.1:64867 - R:/127.0.0.1:8091]
2025-07-30 16:14:30.347 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:14:30.352 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:14:30.353 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:14:30.354 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:14:30.356 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:14:30.356 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:14:30.356 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:14:30.397 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:14:30.681 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:14:30.686 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:14:30.687 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:14:30.687 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:14:30.721 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:14:30.721 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1290 ms
2025-07-30 16:14:31.276 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:14:31.281 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:14:31.284 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:14:31.284 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:14:31.285 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:14:31.285 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:14:31.324 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:14:31.334 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:14:31.334 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:14:31.343 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:14:31.452 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5d1d05ff
2025-07-30 16:14:31.453 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:14:31.464 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:14:31.475 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:31.475 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:31.475 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:31.531 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:14:31.531 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:14:31.531 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:14:31.540 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x24a70bfd, L:/127.0.0.1:64870 - R:/127.0.0.1:8091]
2025-07-30 16:14:31.540 [main] INFO  [NettyPoolableFactory] - register success, cost 8 ms, version:2.0.0,role:RMROLE,channel:[id: 0x24a70bfd, L:/127.0.0.1:64870 - R:/127.0.0.1:8091]
2025-07-30 16:14:31.543 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:14:31.569 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:14:31.569 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:14:31.690 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:14:31.717 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:14:31.724 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:14:31.786 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:14:31.787 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:14:31.788 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:14:31.789 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:14:31.817 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:14:31.968 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:14:31.995 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:14:31.995 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:14:32.044 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:14:32.050 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:14:32.053 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:14:32.201 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:14:32.201 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:14:32.204 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:14:32.361 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753863272206, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:14:32.637 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:14:32.679 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:32.680 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:32.680 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:32.680 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:32.680 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:32.680 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:32.681 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:32.681 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:32.681 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:32.681 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:14:32.681 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:14:32.681 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:14:32.683 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:14:32.687 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:14:32.696 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:14:32.696 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:14:33.079 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:14:33.079 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:14:33.079 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:14:33.079 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:14:33.116 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:14:33.130 [main] INFO  [IAMApplication] - Started IAMApplication in 4.075 seconds (process running for 4.293)
2025-07-30 16:24:57.163 [HikariPool-1 housekeeper] WARN  [HikariPool] - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m55s583ms).
2025-07-30 16:25:05.186 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:25:05.187 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:25:05.187 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:25:05.189 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:25:05.190 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:25:05.192 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:25:05.192 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:25:05.414 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:25:05.852 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:25:05.853 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:25:05.865 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 16:25:05.980 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:25:06.049 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:25:06.090 [main] INFO  [Reflections] - Reflections took 34 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:25:06.096 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:25:06.096 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:25:06.103 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:25:06.107 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.122 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.123 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.123 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.145 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.146 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.147 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.147 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.147 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.149 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.151 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:06.152 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:25:06.162 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:25:06.179 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:25:06.183 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:25:06.192 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:25:06.192 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:25:06.226 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:25:06.232 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:25:06.237 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:25:06.239 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:25:06.241 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:25:06.244 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753863906243
timestamp=1753863906243
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:25:06.294 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:25:06.306 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xd84c559a, L:/127.0.0.1:65238 - R:/127.0.0.1:8091]
2025-07-30 16:25:06.309 [main] INFO  [NettyPoolableFactory] - register success, cost 25 ms, version:2.0.0,role:TMROLE,channel:[id: 0xd84c559a, L:/127.0.0.1:65238 - R:/127.0.0.1:8091]
2025-07-30 16:25:06.309 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:25:06.314 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:25:06.315 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:25:06.316 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:25:06.318 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:25:06.318 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:25:06.318 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:25:06.357 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:25:06.635 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:25:06.641 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:25:06.641 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:25:06.641 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:25:06.673 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:25:06.673 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1251 ms
2025-07-30 16:25:07.423 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:25:07.428 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:25:07.431 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:25:07.431 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:25:07.432 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:25:07.432 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:25:07.467 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:25:07.476 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:25:07.476 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:25:07.485 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:25:07.595 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@620260ad
2025-07-30 16:25:07.596 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:25:07.607 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:25:07.618 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:07.618 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:07.618 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:07.662 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:25:07.662 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:25:07.662 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:25:07.670 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x17e3f76b, L:/127.0.0.1:65260 - R:/127.0.0.1:8091]
2025-07-30 16:25:07.670 [main] INFO  [NettyPoolableFactory] - register success, cost 7 ms, version:2.0.0,role:RMROLE,channel:[id: 0x17e3f76b, L:/127.0.0.1:65260 - R:/127.0.0.1:8091]
2025-07-30 16:25:07.672 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:25:07.698 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:25:07.698 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:25:07.820 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:25:07.853 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:25:07.859 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:25:07.922 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:25:07.924 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:25:07.924 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:25:07.925 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:25:07.954 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:25:08.095 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:25:08.120 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:25:08.120 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:25:08.170 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:25:08.176 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:25:08.179 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:25:08.326 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:25:08.326 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:25:08.329 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:25:08.498 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753863908331, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:25:08.784 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:25:08.823 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:08.823 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:08.823 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:08.823 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:08.823 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:08.823 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:08.824 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:08.824 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:08.824 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:08.824 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:08.824 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:08.824 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:08.826 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:25:08.940 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:25:08.944 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:25:11.498 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:25:11.656 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x17e3f76b, L:/127.0.0.1:65260 ! R:/127.0.0.1:8091]
2025-07-30 16:25:11.657 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x17e3f76b, L:/127.0.0.1:65260 ! R:/127.0.0.1:8091]
2025-07-30 16:25:11.657 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x17e3f76b, L:/127.0.0.1:65260 ! R:/127.0.0.1:8091]
2025-07-30 16:25:11.657 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x17e3f76b, L:/127.0.0.1:65260 ! R:/127.0.0.1:8091]
2025-07-30 16:25:11.658 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x17e3f76b, L:/127.0.0.1:65260 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:11.658 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x17e3f76b, L:/127.0.0.1:65260 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:11.670 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:25:11.700 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:25:11.728 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:25:14.507 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:25:14.507 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:25:14.509 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:25:18.904 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:25:18.904 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 16:25:18.904 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:25:18.905 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 16:25:18.905 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:25:18.906 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 16:25:18.913 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 16:25:18.935 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 16:25:27.874 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:25:27.875 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:25:27.875 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:25:27.877 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:25:27.878 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:25:27.881 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:25:27.881 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:25:28.081 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:25:28.522 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:25:28.523 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:25:28.538 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-30 16:25:28.663 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:25:28.733 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:25:28.772 [main] INFO  [Reflections] - Reflections took 33 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:25:28.778 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:25:28.778 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:25:28.784 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:25:28.787 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.804 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.804 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.804 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.825 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.827 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.828 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.828 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.828 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.830 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.831 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:28.833 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:25:28.841 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:25:28.858 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:25:28.862 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:25:28.872 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:25:28.872 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:25:28.901 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:25:28.907 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:25:28.916 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:25:28.918 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:25:28.920 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:25:28.924 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753863928923
timestamp=1753863928923
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:25:28.973 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:25:28.986 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x819dacb5, L:/127.0.0.1:65348 - R:/127.0.0.1:8091]
2025-07-30 16:25:28.988 [main] INFO  [NettyPoolableFactory] - register success, cost 26 ms, version:2.0.0,role:TMROLE,channel:[id: 0x819dacb5, L:/127.0.0.1:65348 - R:/127.0.0.1:8091]
2025-07-30 16:25:28.988 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:25:28.994 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:25:28.996 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:25:28.996 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:25:28.999 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:25:28.999 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:25:28.999 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:25:29.040 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:25:29.329 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:25:29.335 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:25:29.336 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:25:29.336 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:25:29.374 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:25:29.374 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1285 ms
2025-07-30 16:25:29.922 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:25:29.927 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:25:29.930 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:25:29.931 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:25:29.931 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:25:29.931 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:25:29.967 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:25:29.978 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:25:29.978 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:25:29.987 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:25:30.096 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@18f1260
2025-07-30 16:25:30.097 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:25:30.108 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:25:30.119 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:30.119 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:30.119 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:30.161 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:25:30.161 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:25:30.161 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:25:30.166 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x6d83a8b2, L:/127.0.0.1:65352 - R:/127.0.0.1:8091]
2025-07-30 16:25:30.166 [main] INFO  [NettyPoolableFactory] - register success, cost 4 ms, version:2.0.0,role:RMROLE,channel:[id: 0x6d83a8b2, L:/127.0.0.1:65352 - R:/127.0.0.1:8091]
2025-07-30 16:25:30.168 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:25:30.194 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:25:30.194 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:25:30.315 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:25:30.342 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:25:30.348 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:25:30.411 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:25:30.412 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:25:30.413 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:25:30.413 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:25:30.437 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:25:30.582 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:25:30.608 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:25:30.608 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:25:30.659 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:25:30.665 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:25:30.667 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:25:31.167 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:25:31.167 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:25:31.177 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:25:31.454 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753863931192, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:25:31.738 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:25:31.783 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:31.783 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:31.783 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:31.783 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:31.783 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:31.783 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:31.784 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:31.784 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:31.785 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:31.785 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:31.785 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:31.785 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:31.787 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:25:31.902 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:25:31.906 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:25:34.165 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:25:34.174 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x819dacb5, L:/127.0.0.1:65348 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x819dacb5, L:/127.0.0.1:65348 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x819dacb5, L:/127.0.0.1:65348 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x819dacb5, L:/127.0.0.1:65348 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x819dacb5, L:/127.0.0.1:65348 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:34.174 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x819dacb5, L:/127.0.0.1:65348 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:34.174 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x6d83a8b2, L:/127.0.0.1:65352 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x6d83a8b2, L:/127.0.0.1:65352 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x6d83a8b2, L:/127.0.0.1:65352 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x6d83a8b2, L:/127.0.0.1:65352 ! R:/127.0.0.1:8091]
2025-07-30 16:25:34.174 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x6d83a8b2, L:/127.0.0.1:65352 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:34.174 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x6d83a8b2, L:/127.0.0.1:65352 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:34.176 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:25:34.193 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:25:34.207 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:25:37.211 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:25:37.211 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:25:37.212 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:25:40.107 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:25:43.077 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:25:43.086 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x15163139, L:/127.0.0.1:64867 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.086 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x15163139, L:/127.0.0.1:64867 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.086 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x15163139, L:/127.0.0.1:64867 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.086 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x15163139, L:/127.0.0.1:64867 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.087 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x15163139, L:/127.0.0.1:64867 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:43.087 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x15163139, L:/127.0.0.1:64867 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:43.087 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x24a70bfd, L:/127.0.0.1:64870 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.087 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x24a70bfd, L:/127.0.0.1:64870 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.087 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x24a70bfd, L:/127.0.0.1:64870 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.087 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x24a70bfd, L:/127.0.0.1:64870 ! R:/127.0.0.1:8091]
2025-07-30 16:25:43.087 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x24a70bfd, L:/127.0.0.1:64870 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:43.087 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x24a70bfd, L:/127.0.0.1:64870 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:25:46.267 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:25:46.268 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:25:46.268 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:25:46.274 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:25:46.275 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:25:46.280 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:25:46.280 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:25:46.554 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:25:47.188 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:25:47.191 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:25:47.207 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:25:47.346 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:25:47.424 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:25:47.469 [main] INFO  [Reflections] - Reflections took 37 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:25:47.478 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:25:47.478 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:25:47.484 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:25:47.487 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.509 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.510 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.510 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.536 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.538 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.538 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.539 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e32d0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.539 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.541 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.543 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:25:47.544 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:25:47.566 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:25:47.587 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:25:47.592 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:25:47.607 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:25:47.608 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:25:47.645 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:25:47.652 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:25:47.659 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:25:47.668 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:25:47.669 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:25:47.672 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753863947672
timestamp=1753863947672
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:25:47.728 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:25:47.742 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xbe1f866b, L:/127.0.0.1:65387 - R:/127.0.0.1:8091]
2025-07-30 16:25:47.744 [main] INFO  [NettyPoolableFactory] - register success, cost 28 ms, version:2.0.0,role:TMROLE,channel:[id: 0xbe1f866b, L:/127.0.0.1:65387 - R:/127.0.0.1:8091]
2025-07-30 16:25:47.744 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:25:47.754 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:25:47.755 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:25:47.756 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:25:47.758 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:25:47.758 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:25:47.758 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:25:47.801 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:25:48.154 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:25:48.159 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:25:48.159 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:25:48.159 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:25:48.190 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:25:48.191 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1626 ms
2025-07-30 16:25:48.740 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:25:48.745 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:25:48.748 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:25:48.749 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:25:48.750 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:25:48.750 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:25:48.788 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:25:48.800 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:25:48.800 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:25:48.810 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:25:48.922 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5f80b25a
2025-07-30 16:25:48.923 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:25:48.934 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:25:48.947 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:48.947 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:48.947 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:48.996 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:25:48.996 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:25:48.997 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:25:49.006 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x51393f39, L:/127.0.0.1:65390 - R:/127.0.0.1:8091]
2025-07-30 16:25:49.006 [main] INFO  [NettyPoolableFactory] - register success, cost 9 ms, version:2.0.0,role:RMROLE,channel:[id: 0x51393f39, L:/127.0.0.1:65390 - R:/127.0.0.1:8091]
2025-07-30 16:25:49.008 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:25:49.034 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:25:49.034 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:25:49.150 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:25:49.176 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:25:49.183 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:25:49.246 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:25:49.248 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:25:49.269 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:25:49.269 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:25:49.299 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:25:49.444 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:25:49.470 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:25:49.470 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:25:49.522 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:25:49.529 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:25:49.531 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:25:49.673 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:25:49.673 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:25:49.676 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:25:50.090 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753863949678, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:25:50.545 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:25:50.585 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:50.585 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:50.585 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:50.585 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:50.585 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:50.585 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:50.586 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:50.587 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:50.587 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:50.587 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:25:50.587 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:25:50.587 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:25:50.589 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:25:50.594 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:25:50.603 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:25:50.603 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:25:50.993 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:25:50.993 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:25:50.994 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:25:50.994 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:25:51.023 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:25:51.037 [main] INFO  [IAMApplication] - Started IAMApplication in 4.994 seconds (process running for 5.278)
2025-07-30 16:27:06.418 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:27:06.420 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:27:06.420 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:27:06.422 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:27:06.423 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:27:06.426 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:27:06.426 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:27:06.640 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:27:07.113 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:27:07.115 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:27:07.129 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:27:07.391 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:27:07.498 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:27:07.718 [main] INFO  [Reflections] - Reflections took 171 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:27:07.759 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:27:07.762 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:27:07.784 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:27:07.787 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.834 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.834 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.834 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.860 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.862 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.863 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.863 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.863 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.865 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.868 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:27:07.869 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:27:07.880 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:27:07.906 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:27:07.917 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:27:07.934 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:27:07.935 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:27:07.975 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:27:07.982 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:27:07.988 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:27:07.991 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:27:07.994 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:27:07.996 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753864027995
timestamp=1753864027995
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:27:08.053 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:27:08.065 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x1b4b2e98, L:/127.0.0.1:49162 - R:/127.0.0.1:8091]
2025-07-30 16:27:08.068 [main] INFO  [NettyPoolableFactory] - register success, cost 29 ms, version:2.0.0,role:TMROLE,channel:[id: 0x1b4b2e98, L:/127.0.0.1:49162 - R:/127.0.0.1:8091]
2025-07-30 16:27:08.068 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:27:08.073 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:27:08.074 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:27:08.075 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:27:08.077 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:27:08.077 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:27:08.077 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:27:08.117 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:27:08.410 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:27:08.416 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:27:08.417 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:27:08.417 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:27:08.450 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:27:08.450 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1801 ms
2025-07-30 16:27:09.009 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:27:09.014 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:27:09.017 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:27:09.018 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:27:09.018 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:27:09.018 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:27:09.055 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:27:09.065 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:27:09.066 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:27:09.074 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:27:09.190 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@68fec965
2025-07-30 16:27:09.191 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:27:09.203 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:27:09.213 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:27:09.213 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:27:09.213 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:27:09.259 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:27:09.260 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:27:09.260 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:27:09.264 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x86483cb4, L:/127.0.0.1:49165 - R:/127.0.0.1:8091]
2025-07-30 16:27:09.264 [main] INFO  [NettyPoolableFactory] - register success, cost 4 ms, version:2.0.0,role:RMROLE,channel:[id: 0x86483cb4, L:/127.0.0.1:49165 - R:/127.0.0.1:8091]
2025-07-30 16:27:09.267 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:27:09.294 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:27:09.294 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:27:09.419 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:27:09.449 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:27:09.455 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:27:09.532 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:27:09.534 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:27:09.535 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:27:09.535 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:27:09.562 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:27:09.719 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:27:09.753 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:27:09.754 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:27:09.826 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:27:09.833 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:27:09.836 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:27:10.007 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:27:10.007 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:27:10.009 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:27:10.197 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753864030012, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:27:10.541 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:27:10.583 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:27:10.584 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:27:10.584 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:27:10.584 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:27:10.584 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:27:10.584 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:27:10.585 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:27:10.585 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:27:10.585 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:27:10.585 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:27:10.585 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:27:10.585 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:27:10.587 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:27:10.591 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:27:10.602 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:27:10.602 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:27:10.985 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:27:10.986 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:27:10.986 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:27:10.986 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:27:11.013 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:27:11.027 [main] INFO  [IAMApplication] - Started IAMApplication in 4.798 seconds (process running for 5.015)
2025-07-30 16:27:23.511 [http-nio-8081-exec-1] INFO  [[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-30 16:27:23.512 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-07-30 16:27:23.518 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Completed initialization in 6 ms
2025-07-30 16:27:23.582 [http-nio-8081-exec-1] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 16:27:23.678 [http-nio-8081-exec-1] INFO  [SqlMethodInterceptor] - Calling save method with args: IamTenant(code=Admin, description=null, status=null, expireTime=null)
2025-07-30 16:28:39.782 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:28:39.783 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 16:28:39.783 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:28:39.784 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 16:28:39.785 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:28:39.785 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 16:28:39.787 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 16:28:39.809 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 16:29:01.004 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:29:01.127 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:29:01.140 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x1b4b2e98, L:/127.0.0.1:49162 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.141 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x1b4b2e98, L:/127.0.0.1:49162 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.141 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x1b4b2e98, L:/127.0.0.1:49162 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.141 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x1b4b2e98, L:/127.0.0.1:49162 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.141 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x1b4b2e98, L:/127.0.0.1:49162 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:29:01.141 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x1b4b2e98, L:/127.0.0.1:49162 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:29:01.142 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x86483cb4, L:/127.0.0.1:49165 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.142 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x86483cb4, L:/127.0.0.1:49165 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.142 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x86483cb4, L:/127.0.0.1:49165 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.142 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x86483cb4, L:/127.0.0.1:49165 ! R:/127.0.0.1:8091]
2025-07-30 16:29:01.142 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x86483cb4, L:/127.0.0.1:49165 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:29:01.143 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x86483cb4, L:/127.0.0.1:49165 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:29:16.942 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:29:16.944 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:29:16.944 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:29:16.945 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:29:16.947 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:29:16.949 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:29:16.949 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:29:17.135 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:29:17.558 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:29:17.560 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:29:17.571 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 16:29:17.675 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:29:17.737 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:29:17.774 [main] INFO  [Reflections] - Reflections took 32 ms to scan 7 urls, producing 88 keys and 293 values
2025-07-30 16:29:17.779 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:29:17.779 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:29:17.785 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:29:17.788 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.800 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.801 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.801 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.819 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.820 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.820 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.820 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e1fb8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.821 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.822 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.824 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:29:17.825 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:29:17.832 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:29:17.847 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:29:17.851 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:29:17.857 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:29:17.858 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:29:17.884 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:29:17.888 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:29:17.894 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:29:17.896 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:29:17.897 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:29:17.900 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753864157900
timestamp=1753864157900
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:29:17.942 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:29:17.953 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x1c88e277, L:/127.0.0.1:49339 - R:/127.0.0.1:8091]
2025-07-30 16:29:17.956 [main] INFO  [NettyPoolableFactory] - register success, cost 24 ms, version:2.0.0,role:TMROLE,channel:[id: 0x1c88e277, L:/127.0.0.1:49339 - R:/127.0.0.1:8091]
2025-07-30 16:29:17.956 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:29:17.961 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:29:17.961 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:29:17.962 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:29:17.964 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:29:17.964 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:29:17.964 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:29:17.999 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:29:18.243 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:29:18.248 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:29:18.248 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:29:18.248 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:29:18.280 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:29:18.280 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1138 ms
2025-07-30 16:29:18.781 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:29:18.786 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:29:18.788 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:29:18.789 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:29:18.789 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:29:18.789 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:29:18.823 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:29:18.832 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:29:18.832 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:29:18.840 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:29:18.945 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@14060410
2025-07-30 16:29:18.946 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:29:18.957 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:29:18.968 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:29:18.968 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:29:18.968 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:29:19.005 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:29:19.005 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:29:19.005 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:29:19.015 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x64a9da84, L:/127.0.0.1:49342 - R:/127.0.0.1:8091]
2025-07-30 16:29:19.015 [main] INFO  [NettyPoolableFactory] - register success, cost 9 ms, version:2.0.0,role:RMROLE,channel:[id: 0x64a9da84, L:/127.0.0.1:49342 - R:/127.0.0.1:8091]
2025-07-30 16:29:19.017 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:29:19.040 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:29:19.040 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:29:19.151 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:29:19.175 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:29:19.182 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:29:19.242 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:29:19.243 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:29:19.244 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:29:19.244 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:29:19.266 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:29:19.387 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:29:19.410 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:29:19.410 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:29:19.464 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:29:19.469 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:29:19.472 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:29:19.600 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:29:19.600 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:29:19.602 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:29:19.744 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753864159604, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:29:19.988 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:29:20.023 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:29:20.023 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:29:20.023 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:29:20.023 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:29:20.023 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:29:20.023 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:29:20.024 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:29:20.024 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:29:20.024 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:29:20.024 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:29:20.024 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:29:20.024 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:29:20.026 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:29:20.032 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:29:20.045 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:29:20.045 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:29:20.414 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:29:20.414 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:29:20.414 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:29:20.414 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:29:20.437 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:29:20.449 [main] INFO  [IAMApplication] - Started IAMApplication in 3.68 seconds (process running for 3.889)
2025-07-30 16:29:38.778 [http-nio-8081-exec-1] INFO  [[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-30 16:29:38.779 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-07-30 16:29:38.782 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Completed initialization in 3 ms
2025-07-30 16:29:38.825 [http-nio-8081-exec-1] INFO  [SqlMethodInterceptor] - Calling save method with args: IamTenant(code=test3, description=test tenant 3, status=null, expireTime=null)
2025-07-30 16:45:30.495 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:45:30.497 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:45:30.497 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:45:30.498 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:45:30.500 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:45:30.501 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:45:30.502 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:45:30.699 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:45:31.099 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:45:31.100 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:45:31.111 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 16:45:31.213 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:45:31.278 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:45:31.313 [main] INFO  [Reflections] - Reflections took 30 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:45:31.318 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:45:31.318 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:45:31.324 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:45:31.327 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.341 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.341 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.341 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.360 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.362 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.362 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.363 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.363 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.365 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.366 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:31.367 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:45:31.375 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:45:31.390 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:45:31.394 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:45:31.401 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:45:31.402 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:45:31.425 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:45:31.430 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:45:31.437 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:45:31.439 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:45:31.440 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:45:31.443 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865131443
timestamp=1753865131443
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:45:31.486 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:45:31.496 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x07421d12, L:/127.0.0.1:50748 - R:/127.0.0.1:8091]
2025-07-30 16:45:31.499 [main] INFO  [NettyPoolableFactory] - register success, cost 21 ms, version:2.0.0,role:TMROLE,channel:[id: 0x07421d12, L:/127.0.0.1:50748 - R:/127.0.0.1:8091]
2025-07-30 16:45:31.499 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:45:31.503 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:45:31.504 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:45:31.504 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:45:31.506 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:45:31.506 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:45:31.506 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:45:31.544 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:45:31.794 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:45:31.798 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:45:31.799 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:45:31.799 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:45:31.826 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:45:31.827 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1120 ms
2025-07-30 16:45:32.337 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:45:32.341 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:45:32.343 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:45:32.344 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:45:32.345 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:45:32.345 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:45:32.376 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:45:32.384 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:45:32.384 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:45:32.392 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:45:32.492 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7bf3bf2e
2025-07-30 16:45:32.493 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:45:32.503 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:45:32.513 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:32.513 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:32.513 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:32.552 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:45:32.552 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:45:32.552 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:45:32.559 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x65151074, L:/127.0.0.1:50751 - R:/127.0.0.1:8091]
2025-07-30 16:45:32.559 [main] INFO  [NettyPoolableFactory] - register success, cost 6 ms, version:2.0.0,role:RMROLE,channel:[id: 0x65151074, L:/127.0.0.1:50751 - R:/127.0.0.1:8091]
2025-07-30 16:45:32.560 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:45:32.584 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:45:32.584 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:45:32.696 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:45:32.721 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:45:32.727 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:45:32.792 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:45:32.794 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:45:32.795 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:45:32.798 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:45:32.823 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:45:32.976 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:45:33.000 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:45:33.001 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:45:33.053 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:45:33.063 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:45:33.065 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:45:33.203 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:45:33.204 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:45:33.206 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:45:33.355 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865133208, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:45:33.602 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:45:33.639 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:33.639 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:33.639 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:33.639 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:33.639 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:33.639 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:33.640 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:33.640 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:33.640 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:33.640 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:33.640 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:33.640 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:33.642 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:45:33.759 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:45:33.764 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:45:36.211 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:45:36.224 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x07421d12, L:/127.0.0.1:50748 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.224 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x07421d12, L:/127.0.0.1:50748 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.224 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x07421d12, L:/127.0.0.1:50748 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.224 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x07421d12, L:/127.0.0.1:50748 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.224 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x07421d12, L:/127.0.0.1:50748 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:45:36.224 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x65151074, L:/127.0.0.1:50751 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.224 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x07421d12, L:/127.0.0.1:50748 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:45:36.224 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x65151074, L:/127.0.0.1:50751 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.225 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x65151074, L:/127.0.0.1:50751 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.225 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x65151074, L:/127.0.0.1:50751 ! R:/127.0.0.1:8091]
2025-07-30 16:45:36.225 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x65151074, L:/127.0.0.1:50751 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:45:36.225 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x65151074, L:/127.0.0.1:50751 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:45:36.227 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:45:36.247 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:45:36.260 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:45:39.349 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:45:39.376 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:45:39.445 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:45:55.443 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:45:55.445 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:45:55.445 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:45:55.447 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:45:55.449 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:45:55.451 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:45:55.451 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:45:55.675 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:45:56.142 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:45:56.143 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:45:56.156 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:45:56.274 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:45:56.347 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:45:56.388 [main] INFO  [Reflections] - Reflections took 35 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:45:56.394 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:45:56.394 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:45:56.400 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:45:56.405 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.421 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.421 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.422 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.443 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.445 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.446 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.446 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.447 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.449 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.450 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:45:56.452 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:45:56.461 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:45:56.479 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:45:56.483 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:45:56.491 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:45:56.492 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:45:56.526 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:45:56.533 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:45:56.537 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:45:56.540 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:45:56.541 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:45:56.544 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865156543
timestamp=1753865156543
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:45:56.593 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:45:56.603 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xe712f50e, L:/127.0.0.1:50772 - R:/127.0.0.1:8091]
2025-07-30 16:45:56.606 [main] INFO  [NettyPoolableFactory] - register success, cost 24 ms, version:2.0.0,role:TMROLE,channel:[id: 0xe712f50e, L:/127.0.0.1:50772 - R:/127.0.0.1:8091]
2025-07-30 16:45:56.606 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:45:56.612 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:45:56.613 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:45:56.613 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:45:56.615 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:45:56.616 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:45:56.616 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:45:56.658 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:45:56.946 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:45:56.951 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:45:56.952 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:45:56.952 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:45:56.983 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:45:56.983 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1299 ms
2025-07-30 16:45:57.559 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:45:57.565 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:45:57.568 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:45:57.569 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:45:57.570 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:45:57.570 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:45:57.606 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:45:57.616 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:45:57.616 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:45:57.626 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:45:57.744 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@11703cc8
2025-07-30 16:45:57.745 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:45:57.757 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:45:57.767 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:57.767 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:57.767 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:57.814 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:45:57.814 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:45:57.814 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:45:57.820 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x2493e1b4, L:/127.0.0.1:50776 - R:/127.0.0.1:8091]
2025-07-30 16:45:57.820 [main] INFO  [NettyPoolableFactory] - register success, cost 5 ms, version:2.0.0,role:RMROLE,channel:[id: 0x2493e1b4, L:/127.0.0.1:50776 - R:/127.0.0.1:8091]
2025-07-30 16:45:57.822 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:45:57.849 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:45:57.849 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:45:57.972 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:45:57.998 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:45:58.005 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:45:58.073 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:45:58.074 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:45:58.075 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:45:58.075 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:45:58.102 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:45:58.253 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:45:58.279 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:45:58.279 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:45:58.330 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:45:58.338 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:45:58.341 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:45:58.495 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:45:58.495 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:45:58.498 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:45:58.669 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865158500, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:45:58.956 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:45:58.999 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:58.999 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:58.999 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:58.999 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:58.999 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:58.999 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:59.000 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:59.000 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:59.000 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:59.000 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:45:59.000 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:45:59.000 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:45:59.002 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:45:59.118 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:45:59.122 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:46:01.505 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:46:01.516 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xe712f50e, L:/127.0.0.1:50772 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.516 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xe712f50e, L:/127.0.0.1:50772 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.516 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xe712f50e, L:/127.0.0.1:50772 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.516 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xe712f50e, L:/127.0.0.1:50772 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.516 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe712f50e, L:/127.0.0.1:50772 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:46:01.516 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe712f50e, L:/127.0.0.1:50772 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:46:01.516 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x2493e1b4, L:/127.0.0.1:50776 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.516 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x2493e1b4, L:/127.0.0.1:50776 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.516 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x2493e1b4, L:/127.0.0.1:50776 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.517 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x2493e1b4, L:/127.0.0.1:50776 ! R:/127.0.0.1:8091]
2025-07-30 16:46:01.517 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x2493e1b4, L:/127.0.0.1:50776 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:46:01.517 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x2493e1b4, L:/127.0.0.1:50776 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:46:01.519 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:46:01.536 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:46:01.552 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:46:04.553 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:46:04.553 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:46:17.931 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:46:17.934 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:46:17.934 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:46:17.937 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:46:17.938 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:46:17.943 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:46:17.943 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:46:18.793 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:46:19.472 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:46:19.473 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:46:19.489 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:46:19.640 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:46:19.718 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:46:19.768 [main] INFO  [Reflections] - Reflections took 42 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:46:19.775 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:46:19.775 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:46:19.782 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:46:19.786 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.806 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.806 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.806 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.833 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.836 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.836 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.836 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e0200] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.837 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.839 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.840 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:46:19.841 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:46:19.867 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:46:19.889 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:46:19.893 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:46:19.907 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:46:19.907 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:46:19.947 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:46:19.953 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:46:19.958 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:46:19.963 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:46:19.964 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:46:19.968 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865179967
timestamp=1753865179967
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:46:20.024 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:46:20.038 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x72b39eb5, L:/127.0.0.1:50866 - R:/127.0.0.1:8091]
2025-07-30 16:46:20.041 [main] INFO  [NettyPoolableFactory] - register success, cost 29 ms, version:2.0.0,role:TMROLE,channel:[id: 0x72b39eb5, L:/127.0.0.1:50866 - R:/127.0.0.1:8091]
2025-07-30 16:46:20.041 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:46:20.052 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:46:20.054 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:46:20.054 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:46:20.057 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:46:20.057 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:46:20.057 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:46:20.101 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:46:20.505 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:46:20.510 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:46:20.511 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:46:20.511 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:46:20.552 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:46:20.552 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1745 ms
2025-07-30 16:46:21.147 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:46:21.152 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:46:21.154 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:46:21.155 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:46:21.155 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:46:21.155 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:46:21.191 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:46:21.200 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:46:21.200 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:46:21.213 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:46:21.328 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@61b6f287
2025-07-30 16:46:21.331 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:46:21.350 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:46:21.369 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:46:21.369 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:46:21.369 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:46:21.422 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:46:21.422 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:46:21.422 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:46:21.433 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xbd62a63f, L:/127.0.0.1:50869 - R:/127.0.0.1:8091]
2025-07-30 16:46:21.434 [main] INFO  [NettyPoolableFactory] - register success, cost 11 ms, version:2.0.0,role:RMROLE,channel:[id: 0xbd62a63f, L:/127.0.0.1:50869 - R:/127.0.0.1:8091]
2025-07-30 16:46:21.436 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:46:21.471 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:46:21.471 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:46:21.595 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:46:21.624 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:46:21.631 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:46:21.699 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:46:21.700 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:46:21.701 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:46:21.701 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:46:21.733 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:46:21.888 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:46:21.912 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:46:21.912 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:46:21.963 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:46:21.968 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:46:21.971 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:46:22.104 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:46:22.104 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:46:22.106 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:46:22.251 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865182109, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:46:22.510 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:46:22.548 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:46:22.548 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:46:22.548 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:46:22.548 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:46:22.548 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:46:22.549 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:46:22.550 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:46:22.550 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:46:22.550 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:46:22.550 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:46:22.550 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:46:22.550 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:46:22.551 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:46:22.555 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:46:22.564 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:46:22.564 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:46:22.956 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:46:22.957 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:46:22.957 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:46:22.957 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:46:22.984 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:46:22.998 [main] INFO  [IAMApplication] - Started IAMApplication in 5.595 seconds (process running for 5.964)
2025-07-30 16:48:22.595 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:48:22.595 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:48:22.595 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 16:48:22.602 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 16:48:22.602 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 16:48:22.602 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:48:22.602 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 16:48:22.675 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 16:49:01.415 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:49:01.416 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:49:01.417 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:49:01.418 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:49:01.419 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:49:01.421 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:49:01.421 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:49:01.619 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:49:02.030 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:49:02.031 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:49:02.043 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 16:49:02.173 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:49:02.241 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:49:02.276 [main] INFO  [Reflections] - Reflections took 30 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:49:02.282 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:49:02.282 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:49:02.288 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:49:02.292 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.305 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.306 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.306 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.326 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.327 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.328 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.328 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.328 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.330 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.332 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:49:02.333 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:49:02.342 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:49:02.359 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:49:02.363 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:49:02.371 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:49:02.372 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:49:02.397 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:49:02.402 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:49:02.410 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:49:02.412 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:49:02.413 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:49:02.417 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865342416
timestamp=1753865342416
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:49:02.463 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:49:02.474 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x062bd88e, L:/127.0.0.1:51066 - R:/127.0.0.1:8091]
2025-07-30 16:49:02.476 [main] INFO  [NettyPoolableFactory] - register success, cost 23 ms, version:2.0.0,role:TMROLE,channel:[id: 0x062bd88e, L:/127.0.0.1:51066 - R:/127.0.0.1:8091]
2025-07-30 16:49:02.477 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:49:02.482 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:49:02.483 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:49:02.484 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:49:02.486 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:49:02.486 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:49:02.486 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:49:02.526 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:49:02.786 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:49:02.791 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:49:02.791 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:49:02.791 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:49:02.819 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:49:02.820 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1192 ms
2025-07-30 16:49:03.318 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:49:03.323 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:49:03.327 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:49:03.330 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:49:03.331 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:49:03.333 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:49:03.373 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:49:03.383 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:49:03.383 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:49:03.393 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:49:03.499 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@189fb01b
2025-07-30 16:49:03.499 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:49:03.511 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:49:03.522 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:49:03.523 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:49:03.523 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:49:03.572 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:49:03.572 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:49:03.572 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:49:03.579 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x82be6aca, L:/127.0.0.1:51076 - R:/127.0.0.1:8091]
2025-07-30 16:49:03.579 [main] INFO  [NettyPoolableFactory] - register success, cost 6 ms, version:2.0.0,role:RMROLE,channel:[id: 0x82be6aca, L:/127.0.0.1:51076 - R:/127.0.0.1:8091]
2025-07-30 16:49:03.581 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:49:03.607 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:49:03.607 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:49:03.731 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:49:03.757 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:49:03.764 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:49:03.826 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:49:03.827 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:49:03.828 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:49:03.828 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:49:03.852 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:49:04.012 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:49:04.032 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:49:04.032 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:49:04.087 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:49:04.092 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:49:04.095 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:49:04.232 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:49:04.232 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:49:04.235 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:49:04.380 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865344237, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:49:04.641 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:49:04.679 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:49:04.679 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:49:04.679 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:49:04.679 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:49:04.679 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:49:04.679 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:49:04.680 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:49:04.681 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:49:04.681 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:49:04.681 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:49:04.681 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:49:04.681 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:49:04.682 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:49:04.797 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:49:04.801 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:49:07.240 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:49:07.253 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x062bd88e, L:/127.0.0.1:51066 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.254 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x062bd88e, L:/127.0.0.1:51066 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.254 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x062bd88e, L:/127.0.0.1:51066 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.254 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x062bd88e, L:/127.0.0.1:51066 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.254 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x062bd88e, L:/127.0.0.1:51066 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:49:07.254 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x062bd88e, L:/127.0.0.1:51066 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:49:07.255 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x82be6aca, L:/127.0.0.1:51076 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.255 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x82be6aca, L:/127.0.0.1:51076 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.255 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x82be6aca, L:/127.0.0.1:51076 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.255 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x82be6aca, L:/127.0.0.1:51076 ! R:/127.0.0.1:8091]
2025-07-30 16:49:07.255 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x82be6aca, L:/127.0.0.1:51076 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:49:07.255 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x82be6aca, L:/127.0.0.1:51076 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:49:07.257 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:49:07.277 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:49:07.290 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:49:10.295 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:49:10.295 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:50:30.563 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:50:30.565 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:50:30.565 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:50:30.570 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:50:30.572 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:50:30.576 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:50:30.576 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:50:30.811 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:50:31.403 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:50:31.405 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:50:31.422 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-07-30 16:50:31.556 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:50:31.634 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:50:31.679 [main] INFO  [Reflections] - Reflections took 34 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:50:31.687 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:50:31.687 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:50:31.693 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:50:31.697 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.717 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.717 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.718 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.746 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.748 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.748 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.748 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.749 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.751 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.753 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:31.754 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:50:31.792 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:50:31.820 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:50:31.825 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:50:31.840 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:50:31.841 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:50:31.882 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:50:31.889 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:50:31.899 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:50:31.902 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:50:31.905 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:50:31.911 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865431910
timestamp=1753865431910
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:50:31.972 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:50:31.984 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xbd2da00f, L:/127.0.0.1:51248 - R:/127.0.0.1:8091]
2025-07-30 16:50:31.986 [main] INFO  [NettyPoolableFactory] - register success, cost 27 ms, version:2.0.0,role:TMROLE,channel:[id: 0xbd2da00f, L:/127.0.0.1:51248 - R:/127.0.0.1:8091]
2025-07-30 16:50:31.986 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:50:31.995 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:50:31.996 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:50:31.997 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:50:31.999 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:50:31.999 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:50:31.999 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:50:32.047 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:50:32.862 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:50:32.867 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:50:32.868 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:50:32.868 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:50:32.900 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:50:32.900 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 2079 ms
2025-07-30 16:50:33.439 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:50:33.444 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:50:33.446 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:50:33.447 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:50:33.448 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:50:33.448 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:50:33.484 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:50:33.493 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:50:33.493 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:50:33.502 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:50:33.617 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6f404bc6
2025-07-30 16:50:33.618 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:50:33.629 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:50:33.646 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:50:33.646 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:50:33.646 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:50:33.688 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:50:33.688 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:50:33.688 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:50:33.704 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xb56ca554, L:/127.0.0.1:51251 - R:/127.0.0.1:8091]
2025-07-30 16:50:33.705 [main] INFO  [NettyPoolableFactory] - register success, cost 16 ms, version:2.0.0,role:RMROLE,channel:[id: 0xb56ca554, L:/127.0.0.1:51251 - R:/127.0.0.1:8091]
2025-07-30 16:50:33.707 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:50:33.735 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:50:33.735 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:50:33.855 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:50:33.883 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:50:33.889 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:50:33.954 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:50:33.956 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:50:33.957 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:50:33.957 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:50:33.983 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:50:34.123 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:50:34.150 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:50:34.150 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:50:34.200 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:50:34.206 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:50:34.208 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:50:34.358 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:50:34.358 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:50:34.361 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:50:34.521 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865434363, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:50:34.804 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:50:34.846 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:50:34.846 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:50:34.846 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:50:34.846 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:50:34.846 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:50:34.846 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:50:34.847 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:50:34.847 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:50:34.847 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:50:34.847 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:50:34.847 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:50:34.847 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:50:34.849 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:50:34.964 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:50:34.968 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:50:37.362 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:50:37.368 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xbd2da00f, L:/127.0.0.1:51248 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.368 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xbd2da00f, L:/127.0.0.1:51248 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.368 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xbd2da00f, L:/127.0.0.1:51248 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.368 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xbd2da00f, L:/127.0.0.1:51248 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.368 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xbd2da00f, L:/127.0.0.1:51248 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:50:37.368 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xbd2da00f, L:/127.0.0.1:51248 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:50:37.368 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xb56ca554, L:/127.0.0.1:51251 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.368 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xb56ca554, L:/127.0.0.1:51251 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.369 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xb56ca554, L:/127.0.0.1:51251 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.369 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xb56ca554, L:/127.0.0.1:51251 ! R:/127.0.0.1:8091]
2025-07-30 16:50:37.369 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xb56ca554, L:/127.0.0.1:51251 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:50:37.369 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xb56ca554, L:/127.0.0.1:51251 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:50:37.370 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:50:37.381 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:50:37.392 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:50:40.401 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:50:40.401 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:50:57.739 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:50:57.741 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:50:57.741 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:50:57.742 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:50:57.744 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:50:57.745 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:50:57.746 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:50:57.967 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:50:58.507 [main] INFO  [GenericScope] - BeanFactory id=20ca0ead-6edc-3262-a943-6a2229015e09
2025-07-30 16:50:58.578 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:50:58.619 [main] INFO  [Reflections] - Reflections took 35 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:50:58.625 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:50:58.626 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:50:58.632 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:50:58.636 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.651 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.652 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.652 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.674 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.675 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.676 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.676 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$730/0x00000008010ba3e0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.676 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.678 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.680 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:50:58.682 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:50:58.691 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:50:58.708 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:50:58.713 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:50:58.721 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:50:58.722 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:50:58.749 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:50:58.755 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:50:58.758 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:50:58.760 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:50:58.761 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:50:58.763 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865458762
timestamp=1753865458762
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:50:58.821 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:50:58.833 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xe976fe39, L:/127.0.0.1:51285 - R:/127.0.0.1:8091]
2025-07-30 16:50:58.836 [main] INFO  [NettyPoolableFactory] - register success, cost 25 ms, version:2.0.0,role:TMROLE,channel:[id: 0xe976fe39, L:/127.0.0.1:51285 - R:/127.0.0.1:8091]
2025-07-30 16:50:58.836 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:50:58.841 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:50:58.843 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:50:58.843 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:50:58.846 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:50:58.846 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:50:58.846 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:50:58.872 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:50:59.145 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:50:59.150 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:50:59.150 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:50:59.151 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:50:59.181 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:50:59.182 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1205 ms
2025-07-30 16:50:59.288 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authController' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/controller/AuthController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'authService' defined in file [/Users/sxc/company/IndigoByte Studios/SynapseMOMPlatform/SynapseMOM/foundation-module/iam-service/iam-core/target/classes/com/indigo/iam/service/AuthService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'defaultAuthenticationService' defined in URL [jar:file:/Users/sxc/Documents/tool/m2/report/com/indigo/synapse-security/1.0.0/synapse-security-1.0.0.jar!/com/indigo/security/service/DefaultAuthenticationService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'authenticationStrategyFactory' defined in URL [jar:file:/Users/sxc/Documents/tool/m2/report/com/indigo/synapse-security/1.0.0/synapse-security-1.0.0.jar!/com/indigo/security/factory/AuthenticationStrategyFactory.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'saTokenAuthenticationStrategy' defined in class path resource [com/indigo/security/config/SecurityAutoConfiguration.class]: Unsatisfied dependency expressed through method 'saTokenAuthenticationStrategy' parameter 0: Error creating bean with name 'tokenManager' defined in URL [jar:file:/Users/sxc/Documents/tool/m2/report/com/indigo/synapse-security/1.0.0/synapse-security-1.0.0.jar!/com/indigo/security/core/TokenManager.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'userSessionService' defined in class path resource [com/indigo/cache/config/CacheAutoConfiguration.class]: Unsatisfied dependency expressed through method 'userSessionService' parameter 0: Error creating bean with name 'cacheService' defined in class path resource [com/indigo/cache/config/CacheAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheService' parameter 0: Error creating bean with name 'redisService' defined in class path resource [com/indigo/cache/config/CacheAutoConfiguration.class]: Unsatisfied dependency expressed through method 'redisService' parameter 0: Error creating bean with name 'redisTemplate' defined in class path resource [com/indigo/cache/config/RedisConfiguration.class]: Unsatisfied dependency expressed through method 'redisTemplate' parameter 0: No qualifying bean of type 'org.springframework.data.redis.connection.RedisConnectionFactory' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-07-30 16:50:59.290 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xe976fe39, L:/127.0.0.1:51285 ! R:/127.0.0.1:8091]
2025-07-30 16:50:59.290 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xe976fe39, L:/127.0.0.1:51285 ! R:/127.0.0.1:8091]
2025-07-30 16:50:59.290 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xe976fe39, L:/127.0.0.1:51285 ! R:/127.0.0.1:8091]
2025-07-30 16:50:59.290 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xe976fe39, L:/127.0.0.1:51285 ! R:/127.0.0.1:8091]
2025-07-30 16:50:59.290 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe976fe39, L:/127.0.0.1:51285 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:50:59.290 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xe976fe39, L:/127.0.0.1:51285 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:50:59.291 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:50:59.331 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:50:59.342 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of method redisTemplate in com.indigo.cache.config.RedisConfiguration required a bean of type 'org.springframework.data.redis.connection.RedisConnectionFactory' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.data.redis.connection.RedisConnectionFactory' in your configuration.

2025-07-30 16:50:59.343 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:51:25.725 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:51:25.727 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:51:25.727 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:51:25.729 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:51:25.730 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:51:25.732 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:51:25.732 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:51:25.934 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:51:26.387 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:51:26.389 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:51:26.402 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 16:51:26.521 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:51:26.593 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:51:26.632 [main] INFO  [Reflections] - Reflections took 33 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:51:26.638 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:51:26.638 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:51:26.646 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:51:26.649 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.665 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.665 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.666 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.687 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.689 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.690 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.690 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.690 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.692 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.693 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:51:26.695 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:51:26.704 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:51:26.724 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:51:26.735 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:51:26.744 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:51:26.745 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:51:26.776 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:51:26.783 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:51:26.790 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:51:26.793 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:51:26.794 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:51:26.798 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865486797
timestamp=1753865486797
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:51:26.847 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:51:26.858 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x3279a132, L:/127.0.0.1:51379 - R:/127.0.0.1:8091]
2025-07-30 16:51:26.861 [main] INFO  [NettyPoolableFactory] - register success, cost 24 ms, version:2.0.0,role:TMROLE,channel:[id: 0x3279a132, L:/127.0.0.1:51379 - R:/127.0.0.1:8091]
2025-07-30 16:51:26.861 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:51:26.867 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:51:26.868 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:51:26.869 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:51:26.871 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:51:26.872 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:51:26.872 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:51:26.913 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:51:27.188 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:51:27.193 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:51:27.193 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:51:27.193 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:51:27.224 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:51:27.224 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1281 ms
2025-07-30 16:51:27.764 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:51:27.768 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:51:27.771 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:51:27.772 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:51:27.773 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:51:27.773 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:51:27.810 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:51:27.820 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:51:27.820 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:51:27.829 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:51:27.940 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3e9e7a70
2025-07-30 16:51:27.940 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:51:27.953 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:51:27.964 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:51:27.964 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:51:27.965 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:51:28.004 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:51:28.005 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:51:28.005 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:51:28.009 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x413b3374, L:/127.0.0.1:51382 - R:/127.0.0.1:8091]
2025-07-30 16:51:28.009 [main] INFO  [NettyPoolableFactory] - register success, cost 4 ms, version:2.0.0,role:RMROLE,channel:[id: 0x413b3374, L:/127.0.0.1:51382 - R:/127.0.0.1:8091]
2025-07-30 16:51:28.011 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:51:28.039 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:51:28.039 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:51:28.164 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:51:28.191 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:51:28.198 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:51:28.263 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:51:28.265 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:51:28.265 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:51:28.266 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:51:28.293 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:51:28.439 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:51:28.464 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:51:28.465 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:51:28.515 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:51:28.523 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:51:28.526 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:51:28.681 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:51:28.681 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:51:28.683 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:51:28.846 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865488686, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:51:29.127 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:51:29.169 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:51:29.169 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:51:29.169 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:51:29.169 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:51:29.169 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:51:29.169 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:51:29.170 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:51:29.170 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:51:29.170 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:51:29.170 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:51:29.171 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:51:29.171 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:51:29.173 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:51:29.178 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:51:29.187 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:51:29.187 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:51:29.574 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:51:29.575 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:51:29.575 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:51:29.575 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:51:29.604 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:51:29.617 [main] INFO  [IAMApplication] - Started IAMApplication in 4.044 seconds (process running for 4.262)
2025-07-30 16:51:41.602 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:51:41.604 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 16:51:41.602 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:51:41.604 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 16:51:41.605 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:51:41.606 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 16:51:41.607 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 16:51:41.628 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 16:52:18.815 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:52:18.816 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:52:18.816 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:52:18.817 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:52:18.818 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:52:18.821 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:52:18.821 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:52:19.027 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:52:19.508 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:52:19.509 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:52:19.526 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-07-30 16:52:19.769 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:52:20.337 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:52:20.404 [main] INFO  [Reflections] - Reflections took 52 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:52:20.410 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:52:20.411 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:52:20.419 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:52:20.434 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.471 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.472 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.473 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.501 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.503 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.503 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.504 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010dfd70] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.504 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.507 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.510 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:52:20.511 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:52:20.524 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:52:20.543 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:52:20.549 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:52:20.561 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:52:20.562 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:52:20.591 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:52:20.597 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:52:20.605 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:52:20.608 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:52:20.612 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:52:20.614 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865540614
timestamp=1753865540614
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:52:20.665 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:52:20.678 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x3eee1a98, L:/127.0.0.1:51470 - R:/127.0.0.1:8091]
2025-07-30 16:52:20.681 [main] INFO  [NettyPoolableFactory] - register success, cost 26 ms, version:2.0.0,role:TMROLE,channel:[id: 0x3eee1a98, L:/127.0.0.1:51470 - R:/127.0.0.1:8091]
2025-07-30 16:52:20.681 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:52:20.686 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:52:20.687 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:52:20.688 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:52:20.690 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:52:20.690 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:52:20.690 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:52:20.743 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:52:21.066 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:52:21.071 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:52:21.072 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:52:21.072 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:52:21.102 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:52:21.103 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 2067 ms
2025-07-30 16:52:21.663 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:52:21.669 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:52:21.672 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:52:21.673 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:52:21.674 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:52:21.674 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:52:21.711 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:52:21.720 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:52:21.720 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:52:21.728 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:52:21.836 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@49522bdf
2025-07-30 16:52:21.837 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:52:21.849 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:52:21.860 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:52:21.860 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:52:21.860 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:52:21.899 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:52:21.899 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:52:21.899 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:52:21.906 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x2bffc3e2, L:/127.0.0.1:51473 - R:/127.0.0.1:8091]
2025-07-30 16:52:21.906 [main] INFO  [NettyPoolableFactory] - register success, cost 6 ms, version:2.0.0,role:RMROLE,channel:[id: 0x2bffc3e2, L:/127.0.0.1:51473 - R:/127.0.0.1:8091]
2025-07-30 16:52:21.909 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:52:21.934 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:52:21.934 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:52:22.061 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:52:22.090 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:52:22.097 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:52:22.166 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:52:22.167 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:52:22.168 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:52:22.168 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:52:22.194 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:52:22.338 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:52:22.378 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:52:22.378 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:52:22.427 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:52:22.433 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:52:22.436 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:52:22.579 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:52:22.579 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:52:22.581 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:52:22.739 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865542584, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:52:23.016 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:52:23.061 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:52:23.061 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:52:23.061 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:52:23.061 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:52:23.061 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:52:23.061 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:52:23.062 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:52:23.062 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:52:23.062 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:52:23.062 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:52:23.062 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:52:23.062 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:52:23.064 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:52:23.180 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 16:52:23.187 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:52:25.591 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:52:25.602 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x2bffc3e2, L:/127.0.0.1:51473 ! R:/127.0.0.1:8091]
2025-07-30 16:52:25.602 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x2bffc3e2, L:/127.0.0.1:51473 ! R:/127.0.0.1:8091]
2025-07-30 16:52:25.602 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x2bffc3e2, L:/127.0.0.1:51473 ! R:/127.0.0.1:8091]
2025-07-30 16:52:25.602 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x2bffc3e2, L:/127.0.0.1:51473 ! R:/127.0.0.1:8091]
2025-07-30 16:52:25.603 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x2bffc3e2, L:/127.0.0.1:51473 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:52:25.603 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x2bffc3e2, L:/127.0.0.1:51473 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:52:25.605 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 16:52:25.623 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 16:52:25.636 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 16:52:28.646 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:52:28.647 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:52:28.664 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:52:28.678 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 16:52:59.432 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:52:59.433 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 16:52:59.433 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 16:52:59.434 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 16:52:59.435 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 16:52:59.438 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 16:52:59.438 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 16:52:59.625 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 16:53:00.025 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 16:53:00.027 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 16:53:00.041 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-07-30 16:53:00.160 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 16:53:00.229 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 16:53:00.265 [main] INFO  [Reflections] - Reflections took 30 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 16:53:00.270 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 16:53:00.270 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:53:00.277 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 16:53:00.280 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.293 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.293 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.294 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.313 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.315 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.315 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.315 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.315 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.317 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.319 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 16:53:00.320 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 16:53:00.328 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 16:53:00.343 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 16:53:00.346 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 16:53:00.353 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 16:53:00.354 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 16:53:00.388 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 16:53:00.395 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:53:00.399 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 16:53:00.402 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 16:53:00.403 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:53:00.406 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753865580405
timestamp=1753865580405
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 16:53:00.452 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 16:53:00.470 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x73b210ab, L:/127.0.0.1:51489 - R:/127.0.0.1:8091]
2025-07-30 16:53:00.473 [main] INFO  [NettyPoolableFactory] - register success, cost 30 ms, version:2.0.0,role:TMROLE,channel:[id: 0x73b210ab, L:/127.0.0.1:51489 - R:/127.0.0.1:8091]
2025-07-30 16:53:00.473 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:53:00.478 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 16:53:00.479 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 16:53:00.479 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 16:53:00.481 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 16:53:00.482 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 16:53:00.482 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 16:53:00.517 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 16:53:00.767 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 16:53:00.771 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 16:53:00.772 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 16:53:00.772 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 16:53:00.799 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 16:53:00.800 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1167 ms
2025-07-30 16:53:01.345 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 16:53:01.350 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 16:53:01.352 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 16:53:01.353 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 16:53:01.354 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 16:53:01.354 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 16:53:01.385 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 16:53:01.393 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 16:53:01.393 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 16:53:01.400 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 16:53:01.497 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6c96dc5c
2025-07-30 16:53:01.498 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 16:53:01.508 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 16:53:01.518 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:53:01.518 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:53:01.518 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:53:01.558 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 16:53:01.558 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 16:53:01.558 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 16:53:01.563 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x7b5f2d91, L:/127.0.0.1:51494 - R:/127.0.0.1:8091]
2025-07-30 16:53:01.563 [main] INFO  [NettyPoolableFactory] - register success, cost 4 ms, version:2.0.0,role:RMROLE,channel:[id: 0x7b5f2d91, L:/127.0.0.1:51494 - R:/127.0.0.1:8091]
2025-07-30 16:53:01.565 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 16:53:01.588 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 16:53:01.588 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 16:53:01.692 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 16:53:01.717 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 16:53:01.724 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 16:53:01.780 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 16:53:01.781 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 16:53:01.782 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 16:53:01.782 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 16:53:01.810 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 16:53:01.937 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 16:53:01.959 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:53:01.959 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:53:02.014 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 16:53:02.020 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 16:53:02.023 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:53:02.151 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 16:53:02.151 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 16:53:02.154 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 16:53:02.300 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753865582156, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 16:53:02.547 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 16:53:02.583 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:53:02.583 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:53:02.583 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:53:02.583 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:53:02.583 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:53:02.583 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:53:02.584 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:53:02.584 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:53:02.584 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:53:02.584 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 16:53:02.584 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 16:53:02.584 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 16:53:02.586 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 16:53:02.590 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 16:53:02.597 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 16:53:02.597 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 16:53:02.959 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 16:53:02.960 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 16:53:02.960 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 16:53:02.960 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 16:53:02.989 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 16:53:03.002 [main] INFO  [IAMApplication] - Started IAMApplication in 3.707 seconds (process running for 3.911)
2025-07-30 16:55:51.407 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 16:55:51.411 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 16:55:51.410 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 16:55:51.413 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 16:55:51.415 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 16:55:51.418 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 16:55:51.423 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 16:55:51.471 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 16:56:12.659 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 16:56:14.382 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 16:56:14.412 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x73b210ab, L:/127.0.0.1:51489 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x73b210ab, L:/127.0.0.1:51489 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x7b5f2d91, L:/127.0.0.1:51494 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x73b210ab, L:/127.0.0.1:51489 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x7b5f2d91, L:/127.0.0.1:51494 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x7b5f2d91, L:/127.0.0.1:51494 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x73b210ab, L:/127.0.0.1:51489 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x7b5f2d91, L:/127.0.0.1:51494 ! R:/127.0.0.1:8091]
2025-07-30 16:56:14.413 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x7b5f2d91, L:/127.0.0.1:51494 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:56:14.413 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x73b210ab, L:/127.0.0.1:51489 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:56:14.413 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x7b5f2d91, L:/127.0.0.1:51494 ! R:/127.0.0.1:8091]) will closed
2025-07-30 16:56:14.413 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x73b210ab, L:/127.0.0.1:51489 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:00:24.364 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 17:00:24.366 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 17:00:24.366 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 17:00:24.367 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 17:00:24.369 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 17:00:24.371 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 17:00:24.371 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 17:00:24.689 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 17:00:25.543 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 17:00:25.545 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 17:00:25.580 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-07-30 17:00:25.772 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 17:00:25.854 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 17:00:25.896 [main] INFO  [Reflections] - Reflections took 34 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 17:00:25.903 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 17:00:25.903 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 17:00:25.910 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 17:00:25.914 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.933 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.933 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.933 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.957 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.959 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.959 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.959 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e0200] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.960 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.962 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.963 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:00:25.964 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 17:00:25.974 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 17:00:25.994 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 17:00:25.999 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 17:00:26.008 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 17:00:26.008 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 17:00:26.037 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 17:00:26.043 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 17:00:26.052 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 17:00:26.055 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 17:00:26.058 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 17:00:26.061 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753866026060
timestamp=1753866026060
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 17:00:26.111 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 17:00:26.126 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x0f47696e, L:/127.0.0.1:52298 - R:/127.0.0.1:8091]
2025-07-30 17:00:26.129 [main] INFO  [NettyPoolableFactory] - register success, cost 28 ms, version:2.0.0,role:TMROLE,channel:[id: 0x0f47696e, L:/127.0.0.1:52298 - R:/127.0.0.1:8091]
2025-07-30 17:00:26.129 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 17:00:26.135 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 17:00:26.136 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 17:00:26.136 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 17:00:26.139 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 17:00:26.139 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 17:00:26.139 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 17:00:26.180 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 17:00:26.468 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 17:00:26.474 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 17:00:26.474 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 17:00:26.474 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 17:00:26.506 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 17:00:26.507 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1797 ms
2025-07-30 17:00:27.315 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 17:00:27.320 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 17:00:27.323 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 17:00:27.324 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 17:00:27.324 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 17:00:27.325 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 17:00:27.369 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 17:00:27.389 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 17:00:27.389 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 17:00:27.405 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 17:00:28.198 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1d3bf0af
2025-07-30 17:00:28.306 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 17:00:28.338 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 17:00:28.352 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:00:28.352 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:00:28.352 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:00:28.461 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 17:00:28.462 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 17:00:28.462 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 17:00:28.486 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xd82fc2fa, L:/127.0.0.1:52311 - R:/127.0.0.1:8091]
2025-07-30 17:00:28.486 [main] INFO  [NettyPoolableFactory] - register success, cost 23 ms, version:2.0.0,role:RMROLE,channel:[id: 0xd82fc2fa, L:/127.0.0.1:52311 - R:/127.0.0.1:8091]
2025-07-30 17:00:28.489 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 17:00:28.560 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 17:00:28.560 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 17:00:28.755 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 17:00:28.787 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 17:00:28.794 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 17:00:28.871 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 17:00:28.872 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 17:00:28.873 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 17:00:28.873 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 17:00:28.905 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 17:00:29.084 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 17:00:29.135 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 17:00:29.135 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 17:00:29.193 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 17:00:29.203 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 17:00:29.205 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 17:00:29.432 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 17:00:29.432 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 17:00:29.435 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 17:00:29.610 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753866029438, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 17:00:29.946 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 17:00:29.988 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:00:29.988 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:00:29.988 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:00:29.988 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:00:29.988 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:00:29.988 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:00:29.989 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:00:29.990 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:00:29.990 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:00:29.990 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:00:29.990 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:00:29.990 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:00:29.992 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 17:00:29.998 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 17:00:30.008 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 17:00:30.008 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 17:00:30.494 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 17:00:30.494 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 17:00:30.495 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 17:00:30.495 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 17:00:30.535 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 17:00:30.548 [main] INFO  [IAMApplication] - Started IAMApplication in 6.409 seconds (process running for 6.672)
2025-07-30 17:01:48.022 [http-nio-8081-exec-1] INFO  [[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-30 17:01:48.026 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-07-30 17:01:48.032 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Completed initialization in 5 ms
2025-07-30 17:01:48.086 [http-nio-8081-exec-1] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 17:01:48.184 [http-nio-8081-exec-1] INFO  [SqlMethodInterceptor] - Calling ServiceImpl method: save with args: [IamTenant(code=Admin, description=null, status=null, expireTime=null)]
2025-07-30 17:01:48.208 [http-nio-8081-exec-1] INFO  [AutoDataSourceInterceptor] - SQL类型: INSERT, 使用主库数据源: master1
2025-07-30 17:01:48.208 [http-nio-8081-exec-1] INFO  [AutoDataSourceInterceptor] - 数据源已切换为: master1
2025-07-30 17:01:48.231 [http-nio-8081-exec-1] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前时间=2025-07-30T17:01:48.231765
2025-07-30 17:01:48.232 [http-nio-8081-exec-1] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前user=UserContext(userId=null, username=admin, nickname=null, email=null, phone=null, avatar=null, tenantId=null, tenantName=null, deptId=null, deptName=null, roles=[admin], permissions=[admin], lastAccessTime=1753866108081, loginTime=1753228116240, clientIp=null, userAgent=null, token=bd34b92c-9081-4006-9dbb-252b26875021, tokenRemaining=null)
2025-07-30 17:01:48.236 [http-nio-8081-exec-1] INFO  [MyMetaObjectHandler] - 插入填充完成
2025-07-30 17:01:48.238 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 当前数据源路由: [master1]
2025-07-30 17:01:48.238 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:01:48.238 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:01:48.284 [http-nio-8081-exec-1] INFO  [AutoDataSourceInterceptor] - 数据源已清除，之前的数据源: master1
2025-07-30 17:02:09.687 [http-nio-8081-exec-2] INFO  [SqlMethodInterceptor] - Calling ServiceImpl method: save with args: [IamTenant(code=test6, description=test tenant 6, status=null, expireTime=null)]
2025-07-30 17:02:09.688 [http-nio-8081-exec-2] INFO  [AutoDataSourceInterceptor] - SQL类型: INSERT, 使用主库数据源: master1
2025-07-30 17:02:09.688 [http-nio-8081-exec-2] INFO  [AutoDataSourceInterceptor] - 数据源已切换为: master1
2025-07-30 17:02:09.689 [http-nio-8081-exec-2] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前时间=2025-07-30T17:02:09.689025
2025-07-30 17:02:09.689 [http-nio-8081-exec-2] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前user=null
2025-07-30 17:02:09.689 [http-nio-8081-exec-2] INFO  [AutoDataSourceInterceptor] - 数据源已清除，之前的数据源: master1
2025-07-30 17:02:09.691 [http-nio-8081-exec-2] ERROR [SqlMethodInterceptor] - Error invoking method: save
java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:214)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:72)
	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy128.save(Unknown Source)
	at com.indigo.iam.service.TenantServiceImpl.addOrModify(TenantService.java:42)
	at com.indigo.iam.controller.TenantController.addOrModify(TenantController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: Failed to save entity
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:118)
	... 73 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:116)
	... 73 common frames omitted
Caused by: org.mybatis.spring.MyBatisSystemException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:99)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:347)
	at jdk.proxy2/jdk.proxy2.$Proxy130.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:224)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy171.insert(Unknown Source)
	... 78 common frames omitted
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:199)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:333)
	... 84 common frames omitted
Caused by: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at com.indigo.databases.config.MyMetaObjectHandler.insertFill(MybatisPlusConfig.java:144)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.lambda$insertFill$0(MybatisParameterHandler.java:142)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.insertFill(MybatisParameterHandler.java:140)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.process(MybatisParameterHandler.java:110)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4905)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.processParameter(MybatisParameterHandler.java:79)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.<init>(MybatisParameterHandler.java:72)
	at com.baomidou.mybatisplus.core.MybatisXMLLanguageDriver.createParameterHandler(MybatisXMLLanguageDriver.java:46)
	at org.apache.ibatis.session.Configuration.newParameterHandler(Configuration.java:705)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:70)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:42)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:47)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:719)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.indigo.databases.interceptor.AutoDataSourceInterceptor.intercept(AutoDataSourceInterceptor.java:67)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy172.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy172.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy172.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	... 90 common frames omitted
2025-07-30 17:02:09.697 [http-nio-8081-exec-2] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.reflect.UndeclaredThrowableException: null
	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy128.save(Unknown Source)
	at com.indigo.iam.service.TenantServiceImpl.addOrModify(TenantService.java:42)
	at com.indigo.iam.controller.TenantController.addOrModify(TenantController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:214)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:72)
	... 67 common frames omitted
Caused by: java.lang.RuntimeException: Failed to save entity
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:118)
	... 73 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:116)
	... 73 common frames omitted
Caused by: org.mybatis.spring.MyBatisSystemException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:99)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:347)
	at jdk.proxy2/jdk.proxy2.$Proxy130.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:224)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy171.insert(Unknown Source)
	... 78 common frames omitted
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:199)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:333)
	... 84 common frames omitted
Caused by: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at com.indigo.databases.config.MyMetaObjectHandler.insertFill(MybatisPlusConfig.java:144)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.lambda$insertFill$0(MybatisParameterHandler.java:142)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.insertFill(MybatisParameterHandler.java:140)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.process(MybatisParameterHandler.java:110)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4905)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.processParameter(MybatisParameterHandler.java:79)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.<init>(MybatisParameterHandler.java:72)
	at com.baomidou.mybatisplus.core.MybatisXMLLanguageDriver.createParameterHandler(MybatisXMLLanguageDriver.java:46)
	at org.apache.ibatis.session.Configuration.newParameterHandler(Configuration.java:705)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:70)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:42)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:47)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:719)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.indigo.databases.interceptor.AutoDataSourceInterceptor.intercept(AutoDataSourceInterceptor.java:67)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy172.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy172.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy172.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	... 90 common frames omitted
2025-07-30 17:02:18.810 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 17:02:18.810 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 17:02:18.810 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 17:02:18.812 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 17:02:18.813 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 17:02:18.814 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 17:02:18.815 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 17:02:18.830 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 17:02:30.280 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 17:02:30.282 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 17:02:30.282 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 17:02:30.283 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 17:02:30.285 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 17:02:30.286 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 17:02:30.286 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 17:02:30.476 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 17:02:30.892 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 17:02:30.893 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 17:02:30.904 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 17:02:31.007 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 17:02:31.076 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 17:02:31.116 [main] INFO  [Reflections] - Reflections took 34 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 17:02:31.121 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 17:02:31.121 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 17:02:31.127 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 17:02:31.130 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.143 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.143 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.143 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.162 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.163 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.164 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.164 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.164 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.166 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.167 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:02:31.169 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 17:02:31.177 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 17:02:31.194 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 17:02:31.198 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 17:02:31.206 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 17:02:31.206 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 17:02:31.232 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 17:02:31.237 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 17:02:31.242 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 17:02:31.244 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 17:02:31.245 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 17:02:31.247 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753866151246
timestamp=1753866151246
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 17:02:31.291 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 17:02:31.304 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x7f7d6528, L:/127.0.0.1:52461 - R:/127.0.0.1:8091]
2025-07-30 17:02:31.306 [main] INFO  [NettyPoolableFactory] - register success, cost 24 ms, version:2.0.0,role:TMROLE,channel:[id: 0x7f7d6528, L:/127.0.0.1:52461 - R:/127.0.0.1:8091]
2025-07-30 17:02:31.307 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 17:02:31.312 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 17:02:31.312 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 17:02:31.313 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 17:02:31.315 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 17:02:31.315 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 17:02:31.315 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 17:02:31.351 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 17:02:31.604 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 17:02:31.608 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 17:02:31.609 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 17:02:31.609 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 17:02:31.637 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 17:02:31.637 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1153 ms
2025-07-30 17:02:32.148 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 17:02:32.152 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 17:02:32.154 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 17:02:32.155 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 17:02:32.156 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 17:02:32.156 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 17:02:32.188 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 17:02:32.196 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 17:02:32.196 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 17:02:32.205 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 17:02:32.305 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7bf3bf2e
2025-07-30 17:02:32.306 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 17:02:32.316 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 17:02:32.329 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:02:32.329 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:02:32.329 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:02:32.368 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 17:02:32.368 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 17:02:32.368 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 17:02:32.372 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xd446dcd0, L:/127.0.0.1:52464 - R:/127.0.0.1:8091]
2025-07-30 17:02:32.372 [main] INFO  [NettyPoolableFactory] - register success, cost 3 ms, version:2.0.0,role:RMROLE,channel:[id: 0xd446dcd0, L:/127.0.0.1:52464 - R:/127.0.0.1:8091]
2025-07-30 17:02:32.374 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 17:02:32.397 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 17:02:32.397 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 17:02:32.506 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 17:02:32.532 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 17:02:32.538 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 17:02:32.601 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 17:02:32.603 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 17:02:32.604 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 17:02:32.604 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 17:02:32.630 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 17:02:32.767 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 17:02:32.792 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 17:02:32.792 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 17:02:32.843 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 17:02:32.850 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 17:02:32.852 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 17:02:33.001 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 17:02:33.001 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 17:02:33.004 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 17:02:33.159 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753866153007, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 17:02:33.437 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 17:02:33.479 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:02:33.479 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:02:33.479 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:02:33.479 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:02:33.479 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:02:33.479 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:02:33.480 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:02:33.481 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:02:33.481 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:02:33.481 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:02:33.481 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:02:33.481 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:02:33.482 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 17:02:33.597 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 17:02:33.601 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 17:02:36.011 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 17:02:36.022 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x7f7d6528, L:/127.0.0.1:52461 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.022 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x7f7d6528, L:/127.0.0.1:52461 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x7f7d6528, L:/127.0.0.1:52461 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x7f7d6528, L:/127.0.0.1:52461 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x7f7d6528, L:/127.0.0.1:52461 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:36.023 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x7f7d6528, L:/127.0.0.1:52461 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:36.023 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xd446dcd0, L:/127.0.0.1:52464 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xd446dcd0, L:/127.0.0.1:52464 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xd446dcd0, L:/127.0.0.1:52464 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xd446dcd0, L:/127.0.0.1:52464 ! R:/127.0.0.1:8091]
2025-07-30 17:02:36.023 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xd446dcd0, L:/127.0.0.1:52464 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:36.023 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xd446dcd0, L:/127.0.0.1:52464 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:36.025 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 17:02:36.044 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 17:02:36.057 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 17:02:39.057 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 17:02:39.057 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 17:02:39.057 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 17:02:39.999 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 17:02:41.598 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 17:02:41.609 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x0f47696e, L:/127.0.0.1:52298 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.609 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x0f47696e, L:/127.0.0.1:52298 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.609 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x0f47696e, L:/127.0.0.1:52298 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.610 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x0f47696e, L:/127.0.0.1:52298 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.610 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x0f47696e, L:/127.0.0.1:52298 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:41.610 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x0f47696e, L:/127.0.0.1:52298 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:41.610 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xd82fc2fa, L:/127.0.0.1:52311 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.610 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xd82fc2fa, L:/127.0.0.1:52311 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.610 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xd82fc2fa, L:/127.0.0.1:52311 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.610 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xd82fc2fa, L:/127.0.0.1:52311 ! R:/127.0.0.1:8091]
2025-07-30 17:02:41.611 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xd82fc2fa, L:/127.0.0.1:52311 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:02:41.611 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xd82fc2fa, L:/127.0.0.1:52311 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:03:15.347 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 17:03:15.349 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 17:03:15.349 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 17:03:15.350 [main] DEBUG [SearchableProperties] - properties search order:PROPERTIES->JVM->ENV
2025-07-30 17:03:15.352 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 17:03:15.353 [background-preinit] DEBUG [logging] - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-07-30 17:03:15.354 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 17:03:15.556 [main] INFO  [IAMApplication] - The following 1 profile is active: "dev"
2025-07-30 17:03:15.988 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 17:03:15.990 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 17:03:16.001 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 17:03:16.111 [main] INFO  [GenericScope] - BeanFactory id=2ce80c5a-ba0b-30f8-acb9-a9387343e54b
2025-07-30 17:03:16.180 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 17:03:16.218 [main] INFO  [Reflections] - Reflections took 32 ms to scan 7 urls, producing 88 keys and 294 values
2025-07-30 17:03:16.224 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 17:03:16.224 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 17:03:16.231 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 17:03:16.234 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.248 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.249 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.249 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.270 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.272 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.273 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.273 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$753/0x00000008010e2770] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.274 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.276 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.277 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 17:03:16.279 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 17:03:16.288 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 17:03:16.308 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 17:03:16.312 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 17:03:16.320 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 17:03:16.321 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 17:03:16.353 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 17:03:16.359 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 17:03:16.363 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 17:03:16.367 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 17:03:16.369 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 17:03:16.371 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753866196371
timestamp=1753866196371
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 17:03:16.417 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 17:03:16.428 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xedac23d4, L:/127.0.0.1:52482 - R:/127.0.0.1:8091]
2025-07-30 17:03:16.431 [main] INFO  [NettyPoolableFactory] - register success, cost 23 ms, version:2.0.0,role:TMROLE,channel:[id: 0xedac23d4, L:/127.0.0.1:52482 - R:/127.0.0.1:8091]
2025-07-30 17:03:16.431 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 17:03:16.436 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 17:03:16.437 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 17:03:16.437 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 17:03:16.439 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 17:03:16.439 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 17:03:16.439 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 17:03:16.478 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 17:03:16.750 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 17:03:16.756 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 17:03:16.756 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 17:03:16.756 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 17:03:16.786 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 17:03:16.787 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1222 ms
2025-07-30 17:03:17.340 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 17:03:17.345 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 17:03:17.348 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 17:03:17.348 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 17:03:17.349 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 17:03:17.349 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 17:03:17.386 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 17:03:17.395 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 17:03:17.395 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 17:03:17.404 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 17:03:17.509 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@14060410
2025-07-30 17:03:17.510 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 17:03:17.521 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 17:03:17.532 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:03:17.532 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:17.532 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:17.577 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 17:03:17.577 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 17:03:17.577 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 17:03:17.580 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xd4970c90, L:/127.0.0.1:52485 - R:/127.0.0.1:8091]
2025-07-30 17:03:17.580 [main] INFO  [NettyPoolableFactory] - register success, cost 3 ms, version:2.0.0,role:RMROLE,channel:[id: 0xd4970c90, L:/127.0.0.1:52485 - R:/127.0.0.1:8091]
2025-07-30 17:03:17.582 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 17:03:17.610 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 17:03:17.610 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 17:03:17.729 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 17:03:17.757 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 17:03:17.764 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 17:03:17.825 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 17:03:17.826 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 17:03:17.827 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 17:03:17.827 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 17:03:17.853 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 17:03:17.999 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 17:03:18.024 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 17:03:18.024 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 17:03:18.077 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 17:03:18.083 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 17:03:18.086 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 17:03:18.230 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 17:03:18.230 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 17:03:18.233 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 17:03:18.393 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753866198235, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 17:03:18.704 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 17:03:18.742 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:03:18.742 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:18.742 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:18.742 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:03:18.742 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:18.742 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:18.743 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:03:18.743 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:18.743 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:18.743 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 17:03:18.743 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:18.743 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:18.745 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 17:03:18.749 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 17:03:18.758 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 17:03:18.758 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 17:03:19.142 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 17:03:19.142 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 17:03:19.143 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 17:03:19.143 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 17:03:19.170 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 10.8.20.212:8081 register finished
2025-07-30 17:03:19.184 [main] INFO  [IAMApplication] - Started IAMApplication in 3.988 seconds (process running for 4.204)
2025-07-30 17:03:23.414 [http-nio-8081-exec-1] INFO  [[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-30 17:03:23.415 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-07-30 17:03:23.423 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Completed initialization in 8 ms
2025-07-30 17:03:23.460 [http-nio-8081-exec-1] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 17:03:23.523 [http-nio-8081-exec-1] INFO  [SqlMethodInterceptor] - Calling ServiceImpl method: save with args: [IamTenant(code=Admin, description=null, status=null, expireTime=null)]
2025-07-30 17:03:23.541 [http-nio-8081-exec-1] INFO  [AutoDataSourceInterceptor] - SQL类型: INSERT, 使用主库数据源: master1
2025-07-30 17:03:23.544 [http-nio-8081-exec-1] INFO  [AutoDataSourceInterceptor] - 数据源已切换为: master1
2025-07-30 17:03:23.566 [http-nio-8081-exec-1] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前时间=2025-07-30T17:03:23.566842
2025-07-30 17:03:23.567 [http-nio-8081-exec-1] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前user=UserContext(userId=null, username=admin, nickname=null, email=null, phone=null, avatar=null, tenantId=null, tenantName=null, deptId=null, deptName=null, roles=[admin], permissions=[admin], lastAccessTime=1753866203454, loginTime=1753228116240, clientIp=null, userAgent=null, token=bd34b92c-9081-4006-9dbb-252b26875021, tokenRemaining=null)
2025-07-30 17:03:23.571 [http-nio-8081-exec-1] INFO  [MyMetaObjectHandler] - 插入填充完成
2025-07-30 17:03:23.574 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 当前数据源路由: [master1]
2025-07-30 17:03:23.574 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:23.574 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:23.682 [http-nio-8081-exec-1] INFO  [AutoDataSourceInterceptor] - 数据源已清除，之前的数据源: master1
2025-07-30 17:03:45.139 [http-nio-8081-exec-2] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 17:03:45.141 [http-nio-8081-exec-2] INFO  [SqlMethodInterceptor] - Calling ServiceImpl method: save with args: [IamTenant(code=Admin, description=synapse2, status=null, expireTime=null)]
2025-07-30 17:03:45.143 [http-nio-8081-exec-2] INFO  [AutoDataSourceInterceptor] - SQL类型: INSERT, 使用主库数据源: master1
2025-07-30 17:03:45.143 [http-nio-8081-exec-2] INFO  [AutoDataSourceInterceptor] - 数据源已切换为: master1
2025-07-30 17:03:45.144 [http-nio-8081-exec-2] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前时间=2025-07-30T17:03:45.144287
2025-07-30 17:03:45.144 [http-nio-8081-exec-2] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前user=UserContext(userId=null, username=admin, nickname=null, email=null, phone=null, avatar=null, tenantId=null, tenantName=null, deptId=null, deptName=null, roles=[admin], permissions=[admin], lastAccessTime=1753866225138, loginTime=1753228116240, clientIp=null, userAgent=null, token=bd34b92c-9081-4006-9dbb-252b26875021, tokenRemaining=null)
2025-07-30 17:03:45.144 [http-nio-8081-exec-2] INFO  [MyMetaObjectHandler] - 插入填充完成
2025-07-30 17:03:45.144 [http-nio-8081-exec-2] INFO  [DynamicRoutingDataSource] - 当前数据源路由: [master1]
2025-07-30 17:03:45.144 [http-nio-8081-exec-2] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:03:45.144 [http-nio-8081-exec-2] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:03:45.148 [http-nio-8081-exec-2] INFO  [AutoDataSourceInterceptor] - 数据源已清除，之前的数据源: master1
2025-07-30 17:04:30.112 [http-nio-8081-exec-3] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 17:04:30.115 [http-nio-8081-exec-3] INFO  [SqlMethodInterceptor] - Calling ServiceImpl method: save with args: [IamTenant(code=Admin, description=synapse2, status=null, expireTime=null)]
2025-07-30 17:04:30.115 [http-nio-8081-exec-3] INFO  [AutoDataSourceInterceptor] - SQL类型: INSERT, 使用主库数据源: master1
2025-07-30 17:04:30.116 [http-nio-8081-exec-3] INFO  [AutoDataSourceInterceptor] - 数据源已切换为: master1
2025-07-30 17:04:30.116 [http-nio-8081-exec-3] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前时间=2025-07-30T17:04:30.116708
2025-07-30 17:04:30.116 [http-nio-8081-exec-3] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前user=UserContext(userId=null, username=admin, nickname=null, email=null, phone=null, avatar=null, tenantId=null, tenantName=null, deptId=null, deptName=null, roles=[admin], permissions=[admin], lastAccessTime=1753866270111, loginTime=1753228116240, clientIp=null, userAgent=null, token=bd34b92c-9081-4006-9dbb-252b26875021, tokenRemaining=null)
2025-07-30 17:04:30.116 [http-nio-8081-exec-3] INFO  [MyMetaObjectHandler] - 插入填充完成
2025-07-30 17:04:30.117 [http-nio-8081-exec-3] INFO  [DynamicRoutingDataSource] - 当前数据源路由: [master1]
2025-07-30 17:04:30.117 [http-nio-8081-exec-3] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 17:04:30.117 [http-nio-8081-exec-3] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 17:04:30.119 [http-nio-8081-exec-3] INFO  [AutoDataSourceInterceptor] - 数据源已清除，之前的数据源: master1
2025-07-30 17:13:27.587 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 17:13:27.587 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 17:13:27.587 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 17:13:27.596 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 17:13:27.597 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 17:13:27.598 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 17:13:27.601 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 17:13:27.629 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 17:13:48.724 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 17:13:48.750 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 17:13:48.761 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xedac23d4, L:/127.0.0.1:52482 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xedac23d4, L:/127.0.0.1:52482 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xedac23d4, L:/127.0.0.1:52482 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xedac23d4, L:/127.0.0.1:52482 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xedac23d4, L:/127.0.0.1:52482 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:13:48.761 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xedac23d4, L:/127.0.0.1:52482 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:13:48.761 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xd4970c90, L:/127.0.0.1:52485 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xd4970c90, L:/127.0.0.1:52485 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xd4970c90, L:/127.0.0.1:52485 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.761 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xd4970c90, L:/127.0.0.1:52485 ! R:/127.0.0.1:8091]
2025-07-30 17:13:48.762 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xd4970c90, L:/127.0.0.1:52485 ! R:/127.0.0.1:8091]) will closed
2025-07-30 17:13:48.762 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xd4970c90, L:/127.0.0.1:52485 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:44:46.626 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:44:46.628 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:44:46.628 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 22:44:46.630 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 22:44:46.632 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 22:44:46.844 [main] INFO  [IAMApplication] - No active profile set, falling back to 1 default profile: "default"
2025-07-30 22:44:47.362 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 22:44:47.363 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 22:44:47.377 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 22:44:47.504 [main] INFO  [GenericScope] - BeanFactory id=87e139d7-6f46-3cfc-84e5-79604ed548c4
2025-07-30 22:44:47.578 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 22:44:47.616 [main] INFO  [Reflections] - Reflections took 32 ms to scan 7 urls, producing 87 keys and 297 values
2025-07-30 22:44:47.622 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 22:44:47.622 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:44:47.630 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:44:47.633 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.650 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.651 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.651 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.679 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.680 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.681 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.681 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$749/0x00000008010e1c10] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.682 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.683 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.685 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:44:47.686 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 22:44:47.696 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 22:44:47.714 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 22:44:47.719 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 22:44:47.728 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 22:44:47.729 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 22:44:47.756 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 22:44:47.768 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:44:47.770 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 22:44:47.773 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 22:44:47.776 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:44:47.779 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753886687778
timestamp=1753886687778
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 22:44:47.825 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 22:44:47.842 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x6d840cea, L:/127.0.0.1:63811 - R:/127.0.0.1:8091]
2025-07-30 22:44:47.845 [main] INFO  [NettyPoolableFactory] - register success, cost 29 ms, version:2.0.0,role:TMROLE,channel:[id: 0x6d840cea, L:/127.0.0.1:63811 - R:/127.0.0.1:8091]
2025-07-30 22:44:47.846 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:44:47.851 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 22:44:47.852 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 22:44:47.853 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 22:44:47.855 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:44:47.855 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:44:47.855 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 22:44:47.895 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 22:44:48.173 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 22:44:48.178 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 22:44:48.179 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 22:44:48.179 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 22:44:48.212 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 22:44:48.212 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1358 ms
2025-07-30 22:44:48.784 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 22:44:48.790 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 22:44:48.792 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 22:44:48.793 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 22:44:48.794 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 22:44:48.794 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 22:44:48.834 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 22:44:48.844 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 22:44:48.844 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 22:44:48.853 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 22:44:48.971 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@20c55658
2025-07-30 22:44:48.972 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 22:44:48.982 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 22:44:48.993 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:44:48.993 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:44:48.993 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:44:49.036 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:44:49.036 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 22:44:49.036 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 22:44:49.046 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x159035da, L:/127.0.0.1:63814 - R:/127.0.0.1:8091]
2025-07-30 22:44:49.046 [main] INFO  [NettyPoolableFactory] - register success, cost 10 ms, version:2.0.0,role:RMROLE,channel:[id: 0x159035da, L:/127.0.0.1:63814 - R:/127.0.0.1:8091]
2025-07-30 22:44:49.048 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 22:44:49.077 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 22:44:49.077 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 22:44:49.200 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 22:44:49.227 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 22:44:49.233 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 22:44:49.298 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 22:44:49.299 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 22:44:49.300 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 22:44:49.300 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 22:44:49.326 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 22:44:49.477 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 22:44:49.504 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 22:44:49.504 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 22:44:49.554 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 22:44:49.560 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 22:44:49.563 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:44:49.750 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 22:44:49.750 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 22:44:49.753 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:44:49.953 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753886689757, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 22:44:50.306 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 22:44:50.350 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:44:50.350 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:44:50.350 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:44:50.350 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:44:50.350 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:44:50.350 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:44:50.351 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:44:50.351 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:44:50.351 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:44:50.352 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:44:50.352 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:44:50.352 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:44:50.354 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 22:44:50.359 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 22:44:50.369 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 22:44:50.369 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 22:44:50.771 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 22:44:50.772 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 22:44:50.772 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 22:44:50.772 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 22:44:50.806 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 192.168.2.81:8081 register finished
2025-07-30 22:44:50.819 [main] INFO  [IAMApplication] - Started IAMApplication in 4.366 seconds (process running for 4.594)
2025-07-30 22:44:56.835 [http-nio-8081-exec-1] INFO  [[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-30 22:44:56.836 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-07-30 22:44:56.843 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Completed initialization in 6 ms
2025-07-30 22:44:56.908 [http-nio-8081-exec-1] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 22:44:56.965 [http-nio-8081-exec-1] INFO  [TenantService] - 分页查询租户，页码: 1
2025-07-30 22:44:57.099 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:44:57.099 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:44:57.099 [http-nio-8081-exec-1] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:45:00.143 [http-nio-8081-exec-2] INFO  [TenantService] - 分页查询租户，页码: 1
2025-07-30 22:45:00.163 [http-nio-8081-exec-2] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:45:00.163 [http-nio-8081-exec-2] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:45:00.165 [http-nio-8081-exec-2] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:45:05.057 [http-nio-8081-exec-4] INFO  [TenantService] - 获取租户总数
2025-07-30 22:45:05.058 [http-nio-8081-exec-4] ERROR [SqlMethodInterceptor] - Error invoking method: count
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: count
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:248)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:73)
	at jdk.proxy2/jdk.proxy2.$Proxy105.count(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.count(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantCount(TenantService.java:219)
	at com.indigo.iam.controller.TenantController.getTenantCount(TenantController.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 22:45:05.062 [http-nio-8081-exec-4] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: count
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:248)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:73)
	at jdk.proxy2/jdk.proxy2.$Proxy105.count(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.count(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantCount(TenantService.java:219)
	at com.indigo.iam.controller.TenantController.getTenantCount(TenantController.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 22:45:18.820 [http-nio-8081-exec-5] INFO  [TenantService] - 创建租户: test123
2025-07-30 22:45:18.821 [http-nio-8081-exec-5] INFO  [SqlMethodInterceptor] - Calling ServiceImpl method: save with args: [IamTenant(code=test123, description=测试租户, status=1, expireTime=null)]
2025-07-30 22:45:18.825 [http-nio-8081-exec-5] INFO  [AutoDataSourceInterceptor] - SQL类型: INSERT, 使用主库数据源: master1
2025-07-30 22:45:18.825 [http-nio-8081-exec-5] INFO  [AutoDataSourceInterceptor] - 数据源已切换为: master1
2025-07-30 22:45:18.829 [http-nio-8081-exec-5] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前时间=2025-07-30T22:45:18.829025
2025-07-30 22:45:18.829 [http-nio-8081-exec-5] INFO  [MyMetaObjectHandler] - 执行插入填充: 当前user=null
2025-07-30 22:45:18.832 [http-nio-8081-exec-5] INFO  [AutoDataSourceInterceptor] - 数据源已清除，之前的数据源: master1
2025-07-30 22:45:18.834 [http-nio-8081-exec-5] ERROR [SqlMethodInterceptor] - Error invoking method: save
java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:245)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:73)
	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.save(Unknown Source)
	at com.indigo.iam.service.TenantService.createTenant(TenantService.java:33)
	at com.indigo.iam.controller.TenantController.createTenant(TenantController.java:29)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: Failed to save entity
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:121)
	... 73 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:119)
	... 73 common frames omitted
Caused by: org.mybatis.spring.MyBatisSystemException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:99)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:347)
	at jdk.proxy2/jdk.proxy2.$Proxy135.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:224)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy177.insert(Unknown Source)
	... 78 common frames omitted
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:199)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:333)
	... 84 common frames omitted
Caused by: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at com.indigo.databases.config.MyMetaObjectHandler.insertFill(MybatisPlusConfig.java:144)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.lambda$insertFill$0(MybatisParameterHandler.java:142)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.insertFill(MybatisParameterHandler.java:140)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.process(MybatisParameterHandler.java:110)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4905)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.processParameter(MybatisParameterHandler.java:79)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.<init>(MybatisParameterHandler.java:72)
	at com.baomidou.mybatisplus.core.MybatisXMLLanguageDriver.createParameterHandler(MybatisXMLLanguageDriver.java:46)
	at org.apache.ibatis.session.Configuration.newParameterHandler(Configuration.java:705)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:70)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:42)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:47)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:719)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.indigo.databases.interceptor.AutoDataSourceInterceptor.intercept(AutoDataSourceInterceptor.java:67)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy179.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy179.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy179.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	... 90 common frames omitted
2025-07-30 22:45:18.836 [http-nio-8081-exec-5] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.reflect.UndeclaredThrowableException: null
	at jdk.proxy2/jdk.proxy2.$Proxy105.save(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.save(Unknown Source)
	at com.indigo.iam.service.TenantService.createTenant(TenantService.java:33)
	at com.indigo.iam.controller.TenantController.createTenant(TenantController.java:29)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:245)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:73)
	... 67 common frames omitted
Caused by: java.lang.RuntimeException: Failed to save entity
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:121)
	... 73 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.indigo.databases.proxy.SqlMethodInterceptor$1.save(SqlMethodInterceptor.java:119)
	... 73 common frames omitted
Caused by: org.mybatis.spring.MyBatisSystemException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:99)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:347)
	at jdk.proxy2/jdk.proxy2.$Proxy135.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:224)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy177.insert(Unknown Source)
	... 78 common frames omitted
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error updating database.  Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
### The error may exist in com/indigo/iam/repository/mapper/TenantMapper.java (best guess)
### The error may involve com.indigo.iam.repository.mapper.TenantMapper.insert
### The error occurred while executing an update
### Cause: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:199)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:333)
	... 84 common frames omitted
Caused by: java.lang.NullPointerException: Cannot invoke "com.indigo.core.context.UserContext.getUserId()" because "currentUser" is null
	at com.indigo.databases.config.MyMetaObjectHandler.insertFill(MybatisPlusConfig.java:144)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.lambda$insertFill$0(MybatisParameterHandler.java:142)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.insertFill(MybatisParameterHandler.java:140)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.process(MybatisParameterHandler.java:110)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4905)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.processParameter(MybatisParameterHandler.java:79)
	at com.baomidou.mybatisplus.core.MybatisParameterHandler.<init>(MybatisParameterHandler.java:72)
	at com.baomidou.mybatisplus.core.MybatisXMLLanguageDriver.createParameterHandler(MybatisXMLLanguageDriver.java:46)
	at org.apache.ibatis.session.Configuration.newParameterHandler(Configuration.java:705)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.<init>(BaseStatementHandler.java:70)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.<init>(PreparedStatementHandler.java:42)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.<init>(RoutingStatementHandler.java:47)
	at org.apache.ibatis.session.Configuration.newStatementHandler(Configuration.java:719)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:48)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.indigo.databases.interceptor.AutoDataSourceInterceptor.intercept(AutoDataSourceInterceptor.java:67)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy179.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy179.update(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy179.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	... 90 common frames omitted
2025-07-30 22:46:22.818 [http-nio-8081-exec-7] INFO  [TenantService] - 分页查询租户，页码: 1
2025-07-30 22:46:22.822 [http-nio-8081-exec-7] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:46:22.822 [http-nio-8081-exec-7] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:46:22.823 [http-nio-8081-exec-7] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:46:35.455 [http-nio-8081-exec-9] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.IllegalArgumentException: Name for argument of type [java.lang.String] not specified, and parameter name information not available via reflection. Ensure that the compiler uses the '-parameters' flag.
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.updateNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:185)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.getNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:160)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:106)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:228)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 22:46:41.760 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 22:46:41.760 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 22:46:41.760 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 22:46:41.763 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 22:46:41.764 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 22:46:41.765 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 22:46:41.768 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 22:46:41.785 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 22:46:47.208 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:46:47.210 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:46:47.210 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 22:46:47.213 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 22:46:47.215 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 22:46:47.436 [main] INFO  [IAMApplication] - No active profile set, falling back to 1 default profile: "default"
2025-07-30 22:46:47.857 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 22:46:47.859 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 22:46:47.873 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-30 22:46:47.979 [main] INFO  [GenericScope] - BeanFactory id=87e139d7-6f46-3cfc-84e5-79604ed548c4
2025-07-30 22:46:48.047 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 22:46:48.086 [main] INFO  [Reflections] - Reflections took 33 ms to scan 7 urls, producing 87 keys and 297 values
2025-07-30 22:46:48.092 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 22:46:48.092 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:46:48.099 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:46:48.103 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.119 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.119 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.120 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.142 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.144 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.144 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.144 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$749/0x00000008010e2f40] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.145 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.147 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.148 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:46:48.149 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 22:46:48.158 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 22:46:48.176 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 22:46:48.180 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 22:46:48.188 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 22:46:48.188 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 22:46:48.214 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 22:46:48.224 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:46:48.226 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 22:46:48.228 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 22:46:48.231 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:46:48.233 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753886808233
timestamp=1753886808233
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 22:46:48.279 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 22:46:48.290 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xb166df67, L:/127.0.0.1:64021 - R:/127.0.0.1:8091]
2025-07-30 22:46:48.292 [main] INFO  [NettyPoolableFactory] - register success, cost 22 ms, version:2.0.0,role:TMROLE,channel:[id: 0xb166df67, L:/127.0.0.1:64021 - R:/127.0.0.1:8091]
2025-07-30 22:46:48.293 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:46:48.298 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 22:46:48.299 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 22:46:48.299 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 22:46:48.301 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:46:48.301 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:46:48.301 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 22:46:48.338 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 22:46:48.582 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 22:46:48.586 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 22:46:48.587 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 22:46:48.587 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 22:46:48.615 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 22:46:48.615 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1171 ms
2025-07-30 22:46:49.137 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 22:46:49.142 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 22:46:49.144 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 22:46:49.145 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 22:46:49.146 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 22:46:49.146 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 22:46:49.183 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 22:46:49.191 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 22:46:49.191 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 22:46:49.200 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 22:46:49.300 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1d9016fe
2025-07-30 22:46:49.301 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 22:46:49.311 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 22:46:49.320 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:46:49.320 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:46:49.320 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:46:49.363 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:46:49.363 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 22:46:49.363 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 22:46:49.372 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x48bd7c61, L:/127.0.0.1:64024 - R:/127.0.0.1:8091]
2025-07-30 22:46:49.372 [main] INFO  [NettyPoolableFactory] - register success, cost 8 ms, version:2.0.0,role:RMROLE,channel:[id: 0x48bd7c61, L:/127.0.0.1:64024 - R:/127.0.0.1:8091]
2025-07-30 22:46:49.374 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 22:46:49.399 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 22:46:49.399 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 22:46:49.508 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 22:46:49.534 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 22:46:49.541 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 22:46:49.599 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 22:46:49.600 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 22:46:49.601 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 22:46:49.601 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 22:46:49.628 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 22:46:49.761 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 22:46:49.785 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 22:46:49.785 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 22:46:49.837 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 22:46:49.843 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 22:46:49.846 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:46:49.975 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 22:46:49.975 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 22:46:49.977 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:46:50.131 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753886809979, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 22:46:50.396 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 22:46:50.437 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:46:50.437 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:46:50.437 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:46:50.437 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:46:50.437 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:46:50.437 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:46:50.438 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:46:50.438 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:46:50.438 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:46:50.438 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:46:50.438 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:46:50.438 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:46:50.440 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 22:46:50.555 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 22:46:50.559 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 22:46:52.985 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 22:46:52.996 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xb166df67, L:/127.0.0.1:64021 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.996 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xb166df67, L:/127.0.0.1:64021 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.996 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xb166df67, L:/127.0.0.1:64021 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.996 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xb166df67, L:/127.0.0.1:64021 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.997 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xb166df67, L:/127.0.0.1:64021 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:46:52.997 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xb166df67, L:/127.0.0.1:64021 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:46:52.997 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x48bd7c61, L:/127.0.0.1:64024 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.997 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x48bd7c61, L:/127.0.0.1:64024 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.997 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x48bd7c61, L:/127.0.0.1:64024 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.997 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x48bd7c61, L:/127.0.0.1:64024 ! R:/127.0.0.1:8091]
2025-07-30 22:46:52.997 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x48bd7c61, L:/127.0.0.1:64024 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:46:52.997 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x48bd7c61, L:/127.0.0.1:64024 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:46:52.999 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 22:46:53.014 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 22:46:53.027 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 22:46:56.031 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 22:46:56.031 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 22:46:56.033 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 22:47:02.963 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 22:47:04.905 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 22:47:04.932 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x6d840cea, L:/127.0.0.1:63811 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x6d840cea, L:/127.0.0.1:63811 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x159035da, L:/127.0.0.1:63814 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x159035da, L:/127.0.0.1:63814 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x6d840cea, L:/127.0.0.1:63811 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x159035da, L:/127.0.0.1:63814 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x159035da, L:/127.0.0.1:63814 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x6d840cea, L:/127.0.0.1:63811 ! R:/127.0.0.1:8091]
2025-07-30 22:47:04.933 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x159035da, L:/127.0.0.1:63814 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:47:04.933 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x6d840cea, L:/127.0.0.1:63811 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:47:04.933 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x159035da, L:/127.0.0.1:63814 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:47:04.933 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x6d840cea, L:/127.0.0.1:63811 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:59:14.404 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:59:14.405 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:59:14.405 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 22:59:14.408 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 22:59:14.410 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 22:59:14.744 [main] INFO  [IAMApplication] - No active profile set, falling back to 1 default profile: "default"
2025-07-30 22:59:15.329 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 22:59:15.334 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 22:59:15.358 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-07-30 22:59:15.510 [main] INFO  [GenericScope] - BeanFactory id=87e139d7-6f46-3cfc-84e5-79604ed548c4
2025-07-30 22:59:15.588 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 22:59:15.637 [main] INFO  [Reflections] - Reflections took 40 ms to scan 7 urls, producing 87 keys and 297 values
2025-07-30 22:59:15.645 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 22:59:15.645 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:59:15.651 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:59:15.654 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.672 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.672 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.673 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.701 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.703 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.704 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.704 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$749/0x00000008010e0450] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.704 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.706 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.707 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:15.708 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 22:59:15.736 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 22:59:15.763 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 22:59:15.768 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 22:59:15.784 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 22:59:15.784 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 22:59:15.827 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 22:59:15.834 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:59:15.841 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 22:59:15.844 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 22:59:15.845 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:59:15.850 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753887555850
timestamp=1753887555850
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 22:59:15.918 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 22:59:15.943 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x5f8f8471, L:/127.0.0.1:49435 - R:/127.0.0.1:8091]
2025-07-30 22:59:15.946 [main] INFO  [NettyPoolableFactory] - register success, cost 40 ms, version:2.0.0,role:TMROLE,channel:[id: 0x5f8f8471, L:/127.0.0.1:49435 - R:/127.0.0.1:8091]
2025-07-30 22:59:15.947 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:59:15.960 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 22:59:15.961 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 22:59:15.961 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 22:59:15.964 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:59:15.964 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:59:15.964 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 22:59:16.012 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 22:59:17.134 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 22:59:17.143 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 22:59:17.143 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 22:59:17.143 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 22:59:17.234 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 22:59:17.235 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 2476 ms
2025-07-30 22:59:18.178 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 22:59:18.185 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 22:59:18.188 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 22:59:18.189 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 22:59:18.190 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 22:59:18.190 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 22:59:18.244 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 22:59:18.262 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 22:59:18.262 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 22:59:18.280 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 22:59:18.443 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@569d6e0d
2025-07-30 22:59:18.444 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 22:59:18.458 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 22:59:18.481 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:18.481 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:18.481 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:18.549 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:59:18.549 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 22:59:18.549 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 22:59:18.579 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x5f4d746a, L:/127.0.0.1:49439 - R:/127.0.0.1:8091]
2025-07-30 22:59:18.579 [main] INFO  [NettyPoolableFactory] - register success, cost 29 ms, version:2.0.0,role:RMROLE,channel:[id: 0x5f4d746a, L:/127.0.0.1:49439 - R:/127.0.0.1:8091]
2025-07-30 22:59:18.582 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 22:59:18.618 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 22:59:18.618 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 22:59:18.775 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 22:59:18.806 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 22:59:18.813 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 22:59:18.885 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 22:59:18.970 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 22:59:18.972 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 22:59:18.972 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 22:59:19.003 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 22:59:19.175 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 22:59:19.234 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 22:59:19.234 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 22:59:19.292 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 22:59:19.299 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 22:59:19.302 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:59:19.580 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 22:59:19.581 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 22:59:19.587 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:59:19.823 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753887559591, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 22:59:20.159 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 22:59:20.205 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:20.205 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:20.205 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:20.206 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:20.206 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:20.206 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:20.207 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:20.207 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:20.207 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:20.207 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:20.208 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:20.208 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:20.211 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 22:59:20.328 [main] WARN  [AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-30 22:59:20.333 [main] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 22:59:22.592 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 22:59:22.633 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x5f4d746a, L:/127.0.0.1:49439 ! R:/127.0.0.1:8091]
2025-07-30 22:59:22.633 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x5f4d746a, L:/127.0.0.1:49439 ! R:/127.0.0.1:8091]
2025-07-30 22:59:22.633 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x5f4d746a, L:/127.0.0.1:49439 ! R:/127.0.0.1:8091]
2025-07-30 22:59:22.634 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x5f4d746a, L:/127.0.0.1:49439 ! R:/127.0.0.1:8091]
2025-07-30 22:59:22.634 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x5f4d746a, L:/127.0.0.1:49439 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:59:22.634 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x5f4d746a, L:/127.0.0.1:49439 ! R:/127.0.0.1:8091]) will closed
2025-07-30 22:59:22.638 [main] INFO  [StandardService] - Stopping service [Tomcat]
2025-07-30 22:59:22.660 [main] INFO  [ConditionEvaluationReportLogger] - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-30 22:59:22.677 [main] ERROR [LoggingFailureAnalysisReporter] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

2025-07-30 22:59:25.637 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 22:59:25.637 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 22:59:25.638 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 22:59:38.287 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback12.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:59:38.288 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapterBuilder
2025-07-30 22:59:38.288 [main] INFO  [NacosLogging] - Nacos Logging Adapter: com.alibaba.nacos.logger.adapter.logback14.LogbackNacosLoggingAdapter match ch.qos.logback.classic.Logger success.
2025-07-30 22:59:38.291 [main] INFO  [NacosLogging] - Nacos Logging Adapter Builder: com.alibaba.nacos.logger.adapter.log4j2.Log4j2NacosLoggingAdapterBuilder
2025-07-30 22:59:38.293 [background-preinit] INFO  [Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-07-30 22:59:38.506 [main] INFO  [IAMApplication] - No active profile set, falling back to 1 default profile: "default"
2025-07-30 22:59:38.972 [main] INFO  [RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-30 22:59:38.973 [main] INFO  [RepositoryConfigurationDelegate] - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-30 22:59:38.986 [main] INFO  [RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-30 22:59:39.111 [main] INFO  [GenericScope] - BeanFactory id=87e139d7-6f46-3cfc-84e5-79604ed548c4
2025-07-30 22:59:39.179 [main] INFO  [SqlAnnotationAutoConfiguration] - 开始扫描@AutoRepository注解的接口...
2025-07-30 22:59:39.223 [main] INFO  [Reflections] - Reflections took 39 ms to scan 7 urls, producing 87 keys and 297 values
2025-07-30 22:59:39.229 [main] INFO  [SqlAnnotationAutoConfiguration] - 找到1个带有@AutoRepository注解的接口
2025-07-30 22:59:39.229 [main] INFO  [SqlAnnotationAutoConfiguration] - 发现Repository接口: com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:59:39.235 [main] INFO  [SqlAnnotationAutoConfiguration] - Registered AutoRepository proxy: TenantsRepository as com.indigo.iam.repository.service.TenantsRepository
2025-07-30 22:59:39.238 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'TenantsRepository' of type [com.indigo.databases.config.ProxyFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.253 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.254 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springApplicationContextProvider' of type [org.apache.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.254 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.SeataAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.275 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'failureHandler' of type [org.apache.seata.tm.api.DefaultFailureHandlerImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor []? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.276 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.277 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.277 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$749/0x00000008010e0200] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.277 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.279 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'springCloudAlibabaConfiguration' of type [org.apache.seata.spring.boot.autoconfigure.properties.SpringCloudAlibabaConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.280 [main] WARN  [PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'seataProperties' of type [org.apache.seata.spring.boot.autoconfigure.properties.SeataProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [globalTransactionScanner]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-30 22:59:39.281 [main] INFO  [SeataAutoConfiguration] - Automatically configure Seata
2025-07-30 22:59:39.291 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.spring.annotation.ScannerChecker
2025-07-30 22:59:39.308 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Ignore load compatible class io.seata.config.ExtConfigurationProvider, because is not assignable from origin type org.apache.seata.config.ExtConfigurationProvider
2025-07-30 22:59:39.313 [main] INFO  [ConfigurationFactory] - load Configuration from :Spring Configuration
2025-07-30 22:59:39.322 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.integration.tx.api.remoting.RemotingParser
2025-07-30 22:59:39.322 [main] INFO  [GlobalTransactionScanner] - Initializing Global Transaction Clients ... 
2025-07-30 22:59:39.350 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.auth.AuthSigner
2025-07-30 22:59:39.357 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:59:39.365 [main] INFO  [RegistryFactory] - use registry center type: file
2025-07-30 22:59:39.368 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.discovery.registry.RegistryProvider
2025-07-30 22:59:39.369 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:59:39.373 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:TMROLE,address:127.0.0.1:8091,msg:< RegisterTMRequest{version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='ak=null
digest=default_tx_group,192.168.64.1,1753887579372
timestamp=1753887579372
authVersion=V4
vgroup=default_tx_group
ip=192.168.64.1
'} >
2025-07-30 22:59:39.424 [NettyClientSelector_TMROLE_1_1] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.serializer.Serializer
2025-07-30 22:59:39.436 [main] INFO  [TmNettyRemotingClient] - register TM success. client version:2.1.0, server version:2.0.0,channel:[id: 0xf0e47c3d, L:/127.0.0.1:49456 - R:/127.0.0.1:8091]
2025-07-30 22:59:39.439 [main] INFO  [NettyPoolableFactory] - register success, cost 26 ms, version:2.0.0,role:TMROLE,channel:[id: 0xf0e47c3d, L:/127.0.0.1:49456 - R:/127.0.0.1:8091]
2025-07-30 22:59:39.440 [main] INFO  [GlobalTransactionScanner] - Transaction Manager Client is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:59:39.446 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.model.ResourceManager
2025-07-30 22:59:39.447 [main] INFO  [AsyncWorker] - Async Commit Buffer Limit: 10000
2025-07-30 22:59:39.447 [main] INFO  [ResourceManagerXA] - ResourceManagerXA init ...
2025-07-30 22:59:39.450 [main] INFO  [NettyClientBootstrap] - NettyClientBootstrap has started
2025-07-30 22:59:39.450 [main] INFO  [GlobalTransactionScanner] - Resource Manager is initialized. applicationId[iam-service] txServiceGroup[default_tx_group]
2025-07-30 22:59:39.450 [main] INFO  [GlobalTransactionScanner] - Global Transaction Clients are initialized. 
2025-07-30 22:59:39.494 [main] INFO  [GlobalTransactionScanner] - The needed enhancement business beans are : []
2025-07-30 22:59:39.787 [main] INFO  [TomcatWebServer] - Tomcat initialized with port 8081 (http)
2025-07-30 22:59:39.792 [main] INFO  [Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8081"]
2025-07-30 22:59:39.793 [main] INFO  [StandardService] - Starting service [Tomcat]
2025-07-30 22:59:39.793 [main] INFO  [StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-07-30 22:59:39.827 [main] INFO  [[/]] - Initializing Spring embedded WebApplicationContext
2025-07-30 22:59:39.827 [main] INFO  [ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1312 ms
2025-07-30 22:59:40.447 [main] INFO  [CacheAutoConfiguration] - 创建RedisService Bean，RedisTemplate: RedisTemplate, StringRedisTemplate: StringRedisTemplate
2025-07-30 22:59:40.452 [main] INFO  [CacheAutoConfiguration] - 创建UserSessionService Bean - 使用新的session包架构
2025-07-30 22:59:40.455 [main] INFO  [SecurityAutoConfiguration] - 初始化Sa-Token认证策略
2025-07-30 22:59:40.456 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0认证策略
2025-07-30 22:59:40.456 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=satoken, class=SaTokenAuthenticationStrategy
2025-07-30 22:59:40.456 [main] INFO  [AuthenticationStrategyFactory] - 注册认证策略: type=oauth2, class=OAuth2AuthenticationStrategy
2025-07-30 22:59:40.496 [main] INFO  [DynamicDataSourceAutoConfiguration] - DynamicDataSourceProperties loaded: DynamicDataSourceProperties(primary=master1, strict=false, seata=false, p6spy=false, datasource={master1=DynamicDataSourceProperties.DataSourceProperties(type=MYSQL, poolType=HIKARI, host=localhost, port=3306, database=synapse_iam, username=root, password=mamnan920130., params={useUnicode=true, characterEncoding=utf8, useSSL=false, serverTimezone=Asia/Shanghai}, hikari=DynamicDataSourceProperties.HikariPoolProperties(minimumIdle=5, maximumPoolSize=15, idleTimeout=30000, maxLifetime=1800000, connectionTimeout=30000, connectionTestQuery=SELECT 1), druid=DynamicDataSourceProperties.DruidPoolProperties(initialSize=5, minIdle=5, maxActive=20, maxWait=60000, timeBetweenEvictionRunsMillis=60000, minEvictableIdleTimeMillis=300000, maxEvictableIdleTimeMillis=900000, validationQuery=SELECT 1, testWhileIdle=true, testOnBorrow=false, testOnReturn=false, poolPreparedStatements=true, maxPoolPreparedStatementPerConnectionSize=20, filters=stat,wall))})
2025-07-30 22:59:40.506 [main] INFO  [DynamicDataSourceAutoConfiguration] - Initialized datasource [master1] with type [MYSQL] and pool [HIKARI]
2025-07-30 22:59:40.506 [main] INFO  [DynamicDataSourceAutoConfiguration] - Setting default data source: master1
2025-07-30 22:59:40.517 [main] INFO  [HikariDataSource] - HikariPool-1 - Starting...
2025-07-30 22:59:40.644 [main] INFO  [HikariPool] - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4d9ad37e
2025-07-30 22:59:40.645 [main] INFO  [HikariDataSource] - HikariPool-1 - Start completed.
2025-07-30 22:59:40.657 [main] INFO  [MybatisPlusConfig] - MybatisPlusConfig 已加载
2025-07-30 22:59:40.668 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:40.668 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:40.668 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:40.709 [main] INFO  [NettyClientChannelManager] - will connect to 127.0.0.1:8091
2025-07-30 22:59:40.710 [main] INFO  [RmNettyRemotingClient] - RM will register :jdbc:mysql://localhost:3306/synapse_iam
2025-07-30 22:59:40.710 [main] INFO  [NettyPoolableFactory] - NettyPool create channel to transactionRole:RMROLE,address:127.0.0.1:8091,msg:< RegisterRMRequest{resourceIds='jdbc:mysql://localhost:3306/synapse_iam', version='2.1.0', applicationId='iam-service', transactionServiceGroup='default_tx_group', extraData='null'} >
2025-07-30 22:59:40.719 [main] INFO  [RmNettyRemotingClient] - register RM success. client version:2.1.0, server version:2.0.0,channel:[id: 0x2e7241cf, L:/127.0.0.1:49459 - R:/127.0.0.1:8091]
2025-07-30 22:59:40.719 [main] INFO  [NettyPoolableFactory] - register success, cost 9 ms, version:2.0.0,role:RMROLE,channel:[id: 0x2e7241cf, L:/127.0.0.1:49459 - R:/127.0.0.1:8091]
2025-07-30 22:59:40.721 [main] INFO  [EnhancedServiceLoader$InnerEnhancedServiceLoader] - Load compatible class io.seata.core.context.ContextCore
2025-07-30 22:59:40.751 [main] INFO  [MybatisPlusConfig] - 手动注册 MetaObjectHandler Bean
2025-07-30 22:59:40.751 [main] INFO  [MyMetaObjectHandler] - MyMetaObjectHandler Bean 已创建
2025-07-30 22:59:40.884 [main] INFO  [CacheAutoConfiguration] - 创建RateLimitService Bean
2025-07-30 22:59:40.910 [main] INFO  [JWTStpLogic] - JWT认证逻辑初始化完成 - 基于Sa-Token框架，支持微服务间JWT调用
2025-07-30 22:59:40.917 [main] INFO  [PermissionManager] - 权限管理服务初始化完成
2025-07-30 22:59:40.978 [main] INFO  [SecurityAutoConfiguration] - WebMVC安全配置已加载
2025-07-30 22:59:40.979 [main] INFO  [SecurityAutoConfiguration] - 初始化用户上下文拦截器
2025-07-30 22:59:40.980 [main] INFO  [SecurityAutoConfiguration] - 创建JWT Sa-Token配置Bean for WebMVC
2025-07-30 22:59:40.980 [main] INFO  [JWTSaTokenConfiguration] - JWTSaTokenConfiguration 已加载 - 基于Sa-Token框架，支持JWT token生成
2025-07-30 22:59:41.007 [main] INFO  [JWTSaTokenConfiguration] - 用户上下文拦截器已注册
2025-07-30 22:59:41.373 [main] INFO  [SecurityAutoConfiguration] - 初始化OAuth2.0模板
2025-07-30 22:59:41.468 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 22:59:41.469 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 22:59:41.693 [main] INFO  [CacheAutoConfiguration] - 创建DistributedLockService Bean
2025-07-30 22:59:41.705 [main] WARN  [EventHandlerRegistry] - No event handlers found
2025-07-30 22:59:41.707 [main] INFO  [EventsAutoConfiguration] - Initializing UnifiedRocketMQEventPublisher with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:59:41.914 [main] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer started: group=synapse-events-producer, nameServer=localhost:9876
2025-07-30 22:59:41.914 [main] INFO  [UnifiedRocketMQEventPublisher] - Duplicate check enabled: true, use Redis: true
2025-07-30 22:59:41.917 [main] INFO  [EventsAutoConfiguration] - Initializing ReliableRocketMQEventConsumer with properties: EventsProperties(enabled=true, autoGenerateTransactionId=true, duplicateCheck=EventsProperties.DuplicateCheck(enabled=true, useRedis=true, localCacheSize=1000, expireMinutes=5, redisKeyPrefix=synapse:events:duplicate:), rocketmq=EventsProperties.RocketMQ(nameServer=localhost:9876, producerGroup=synapse-events-producer, consumerGroup=synapse-events-consumer, topicPrefix=synapse-events, sendTimeout=3000, pullTimeout=3000, pullBatchSize=32, consumerThreadPoolSize=20, enableRetry=true, maxRetryTimes=3, retryInterval=1000, enableCompression=true, compressionLevel=5), reliable=EventsProperties.ReliableConsumer(heartbeatInterval=30, failureTimeout=90, dedupExpireSeconds=3600, lockTimeout=30, batchSize=10, concurrency=4, retryInterval=1000, maxRetryCount=3, errorRateThreshold=5.0, latencyThreshold=5000, queueBacklogThreshold=1000), monitoring=EventsProperties.Monitoring(enabled=true, metricsInterval=60, detailedLogging=false, dataRetentionHours=24, alert=EventsProperties.Monitoring.Alert(enabled=true, notificationType=log, thresholds=EventsProperties.Monitoring.Alert.Thresholds(errorRate=5.0, latency=5000, queueBacklog=1000))))
2025-07-30 22:59:42.090 [main] INFO  [ReliableRocketMQEventConsumer] - Reliable RocketMQ consumer initialized: instance=iam-service-shixiechengdeMacBook-Pro.local-8081-1753887581920, group=synapse-events-consumer, nameServer=localhost:9876, topicPattern=synapse-events-*
2025-07-30 22:59:42.380 [main] INFO  [EndpointLinksResolver] - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-07-30 22:59:42.424 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:42.425 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:42.425 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:42.425 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:42.425 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:42.425 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:42.426 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:42.426 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:42.426 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:42.426 [main] INFO  [DynamicRoutingDataSource] - 使用默认数据源: [master1]
2025-07-30 22:59:42.426 [main] INFO  [DynamicRoutingDataSource] - 查找数据源，key: [master1], 可用keys: [master1]
2025-07-30 22:59:42.426 [main] INFO  [DynamicRoutingDataSource] - 数据源查找成功，key: [master1], 数据源类型: HikariDataSource
2025-07-30 22:59:42.429 [main] INFO  [Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8081"]
2025-07-30 22:59:42.436 [main] INFO  [TomcatWebServer] - Tomcat started on port 8081 (http) with context path ''
2025-07-30 22:59:42.446 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.impl.NacosClientAuthServiceImpl success.
2025-07-30 22:59:42.446 [main] INFO  [ClientAuthPluginManager] - [ClientAuthPluginManager] Load ClientAuthService com.alibaba.nacos.client.auth.ram.RamClientAuthServiceImpl success.
2025-07-30 22:59:42.856 [main] INFO  [AbstractAbilityControlManager] - Ready to get current node abilities...
2025-07-30 22:59:42.856 [main] INFO  [AbstractAbilityControlManager] - Ready to initialize current node abilities, support modes: [SDK_CLIENT]
2025-07-30 22:59:42.857 [main] INFO  [AbstractAbilityControlManager] - Initialize current abilities finish...
2025-07-30 22:59:42.857 [main] INFO  [NacosAbilityManagerHolder] - [AbilityControlManager] Successfully initialize AbilityControlManager
2025-07-30 22:59:42.889 [main] INFO  [NacosServiceRegistry] - nacos registry, DEFAULT_GROUP iam-service 192.168.2.81:8081 register finished
2025-07-30 22:59:42.902 [main] INFO  [IAMApplication] - Started IAMApplication in 4.775 seconds (process running for 5.002)
2025-07-30 22:59:53.803 [http-nio-8081-exec-1] INFO  [[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-30 22:59:53.803 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-07-30 22:59:53.813 [http-nio-8081-exec-1] INFO  [DispatcherServlet] - Completed initialization in 10 ms
2025-07-30 22:59:53.869 [http-nio-8081-exec-1] INFO  [UserContextInterceptor] - 用户上下文已设置: userId=null, username=admin, tenantId=null
2025-07-30 22:59:53.902 [http-nio-8081-exec-1] INFO  [TenantService] - 分页查询租户，页码: 1
2025-07-30 22:59:53.914 [http-nio-8081-exec-1] ERROR [SqlMethodInterceptor] - Error invoking method: page
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: page
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:250)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:74)
	at jdk.proxy2/jdk.proxy2.$Proxy105.page(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.page(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantsPage(TenantService.java:66)
	at com.indigo.iam.controller.TenantController.getTenantsPage(TenantController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 22:59:53.921 [http-nio-8081-exec-1] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: page
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:250)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:74)
	at jdk.proxy2/jdk.proxy2.$Proxy105.page(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.page(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantsPage(TenantService.java:66)
	at com.indigo.iam.controller.TenantController.getTenantsPage(TenantController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 23:00:38.652 [http-nio-8081-exec-2] INFO  [TenantService] - 分页查询租户，页码: 1
2025-07-30 23:00:38.680 [http-nio-8081-exec-2] ERROR [SqlMethodInterceptor] - Error invoking method: page
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: page
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:250)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:74)
	at jdk.proxy2/jdk.proxy2.$Proxy105.page(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.page(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantsPage(TenantService.java:66)
	at com.indigo.iam.controller.TenantController.getTenantsPage(TenantController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 23:00:38.685 [http-nio-8081-exec-2] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: page
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:250)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:74)
	at jdk.proxy2/jdk.proxy2.$Proxy105.page(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.page(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantsPage(TenantService.java:66)
	at com.indigo.iam.controller.TenantController.getTenantsPage(TenantController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 23:00:42.094 [http-nio-8081-exec-3] INFO  [TenantService] - 获取租户总数
2025-07-30 23:00:42.095 [http-nio-8081-exec-3] ERROR [SqlMethodInterceptor] - Error invoking method: count
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: count
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:250)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:74)
	at jdk.proxy2/jdk.proxy2.$Proxy105.count(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.count(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantCount(TenantService.java:96)
	at com.indigo.iam.controller.TenantController.getTenantCount(TenantController.java:100)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 23:00:42.097 [http-nio-8081-exec-3] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.UnsupportedOperationException: No compatible method found in ServiceImpl for: count
	at com.indigo.databases.proxy.SqlMethodInterceptor.handleBaseRepositoryMethod(SqlMethodInterceptor.java:250)
	at com.indigo.databases.proxy.SqlMethodInterceptor.invoke(SqlMethodInterceptor.java:74)
	at jdk.proxy2/jdk.proxy2.$Proxy105.count(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at jdk.proxy2/jdk.proxy2.$Proxy133.count(Unknown Source)
	at com.indigo.iam.service.TenantService.getTenantCount(TenantService.java:96)
	at com.indigo.iam.controller.TenantController.getTenantCount(TenantController.java:100)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 23:00:45.361 [http-nio-8081-exec-4] ERROR [WebMvcGlobalExceptionHandler] - Unexpected error occurred
java.lang.IllegalArgumentException: Name for argument of type [java.lang.Long] not specified, and parameter name information not available via reflection. Ensure that the compiler uses the '-parameters' flag.
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.updateNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:185)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.getNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:160)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:106)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:228)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at cn.dev33.satoken.filter.SaPathCheckFilterForJakartaServlet.doFilter(SaPathCheckFilterForJakartaServlet.java:55)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-07-30 23:00:48.682 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Start destroying Publisher
2025-07-30 23:00:48.682 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Start destroying common HttpClient
2025-07-30 23:00:48.682 [Thread-33] WARN  [NotifyCenter] - [NotifyCenter] Destruction of the end
2025-07-30 23:00:48.682 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Start destroying ThreadPool
2025-07-30 23:00:48.682 [Thread-2] WARN  [ThreadPoolManager] - [ThreadPoolManager] Destruction of the end
2025-07-30 23:00:48.683 [Thread-27] WARN  [HttpClientBeanHolder] - [HttpClientBeanHolder] Destruction of the end
2025-07-30 23:00:48.684 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registering from Nacos Server now...
2025-07-30 23:00:48.706 [SpringContextShutdownHook] INFO  [NacosServiceRegistry] - De-registration finished.
2025-07-30 23:01:09.888 [SpringContextShutdownHook] WARN  [CommonAnnotationBeanPostProcessor] - Destroy method on bean with name 'eventConsumer' threw an exception: java.lang.IllegalStateException: LettuceConnectionFactory has been STOPPED. Use start() to initialize it
2025-07-30 23:01:12.015 [SpringContextShutdownHook] INFO  [UnifiedRocketMQEventPublisher] - Unified RocketMQ producer shutdown
2025-07-30 23:01:12.022 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0xf0e47c3d, L:/127.0.0.1:49456 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.022 [NettyClientSelector_TMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0xf0e47c3d, L:/127.0.0.1:49456 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.022 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0xf0e47c3d, L:/127.0.0.1:49456 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.022 [NettyClientSelector_TMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0xf0e47c3d, L:/127.0.0.1:49456 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.022 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xf0e47c3d, L:/127.0.0.1:49456 ! R:/127.0.0.1:8091]) will closed
2025-07-30 23:01:12.022 [NettyClientSelector_TMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0xf0e47c3d, L:/127.0.0.1:49456 ! R:/127.0.0.1:8091]) will closed
2025-07-30 23:01:12.023 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - channel inactive: [id: 0x2e7241cf, L:/127.0.0.1:49459 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.023 [NettyClientSelector_RMROLE_1_1] INFO  [NettyClientChannelManager] - return to pool, rm channel:[id: 0x2e7241cf, L:/127.0.0.1:49459 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.023 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - channel valid false,channel:[id: 0x2e7241cf, L:/127.0.0.1:49459 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.023 [NettyClientSelector_RMROLE_1_1] INFO  [NettyPoolableFactory] - will destroy channel:[id: 0x2e7241cf, L:/127.0.0.1:49459 ! R:/127.0.0.1:8091]
2025-07-30 23:01:12.023 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x2e7241cf, L:/127.0.0.1:49459 ! R:/127.0.0.1:8091]) will closed
2025-07-30 23:01:12.023 [NettyClientSelector_RMROLE_1_1] INFO  [AbstractNettyRemotingClient] - ChannelHandlerContext(AbstractNettyRemotingClient$ClientHandler#0, [id: 0x2e7241cf, L:/127.0.0.1:49459 ! R:/127.0.0.1:8091]) will closed
